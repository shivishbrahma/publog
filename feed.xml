<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://shivishbrahma.github.io/publog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://shivishbrahma.github.io/publog/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-08-15T04:46:32+00:00</updated><id>http://shivishbrahma.github.io/publog/feed.xml</id><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><entry><title type="html">Snowflake SQL Cheatsheet</title><link href="http://shivishbrahma.github.io/publog/snowflake-sql-cheatsheet-VniOxVHf/" rel="alternate" type="text/html" title="Snowflake SQL Cheatsheet" /><published>2025-08-07T05:45:02+00:00</published><updated>2025-08-07T05:45:02+00:00</updated><id>http://shivishbrahma.github.io/publog/snowflake-sql-cheatsheet-VniOxVHf</id><content type="html" xml:base="http://shivishbrahma.github.io/publog/snowflake-sql-cheatsheet-VniOxVHf/"><![CDATA[<h2 id="sql-essentials">SQL Essentials</h2>

<h3 id="joins">Joins</h3>

<table>
  <thead>
    <tr>
      <th>Join Type</th>
      <th>Description</th>
      <th>Syntax</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>INNER</td>
      <td>Returns rows that match on both sides of the join</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column</code></td>
    </tr>
    <tr>
      <td>LEFT</td>
      <td>Returns all rows from the left table, and the matched rows from the right table</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column</code></td>
    </tr>
    <tr>
      <td>RIGHT</td>
      <td>Returns all rows from the right table, and the matched rows from the left table</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column</code></td>
    </tr>
    <tr>
      <td>FULL OUTER</td>
      <td>Returns all rows when there is a match on either left or right table</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column</code></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- INNER JOIN usage</span>
<span class="k">SELECT</span> 
    <span class="n">o</span><span class="p">.</span><span class="n">order_id</span><span class="p">,</span> 
    <span class="n">o</span><span class="p">.</span><span class="n">order_date</span><span class="p">,</span> 
    <span class="n">oi</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> 
    <span class="n">oi</span><span class="p">.</span><span class="n">quantity</span><span class="p">,</span> 
    <span class="n">oi</span><span class="p">.</span><span class="n">price</span>
<span class="k">FROM</span> <span class="n">orders</span> <span class="n">o</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">order_items</span> <span class="n">oi</span> <span class="k">ON</span> <span class="n">o</span><span class="p">.</span><span class="n">order_id</span> <span class="o">=</span> <span class="n">oi</span><span class="p">.</span><span class="n">order_id</span><span class="p">;</span>

<span class="c1">-- LEFT JOIN usage</span>
<span class="k">SELECT</span>
    <span class="n">e</span><span class="p">.</span><span class="n">employee_id</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">first_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">last_name</span><span class="p">,</span>
    <span class="n">mgr</span><span class="p">.</span><span class="n">first_name</span> <span class="k">AS</span> <span class="n">manager_first_name</span><span class="p">,</span>
    <span class="n">mgr</span><span class="p">.</span><span class="n">last_name</span> <span class="k">AS</span> <span class="n">manager_last_name</span>
<span class="k">FROM</span> <span class="n">employees</span> <span class="n">e</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">employees</span> <span class="n">mgr</span> <span class="k">ON</span> <span class="n">e</span><span class="p">.</span><span class="n">manager_id</span> <span class="o">=</span> <span class="n">mgr</span><span class="p">.</span><span class="n">employee_id</span><span class="p">;</span>

<span class="c1">-- RIGHT JOIN usage</span>
<span class="k">SELECT</span>
    <span class="k">c</span><span class="p">.</span><span class="n">customer_id</span><span class="p">,</span>
    <span class="k">c</span><span class="p">.</span><span class="n">first_name</span><span class="p">,</span>
    <span class="k">c</span><span class="p">.</span><span class="n">last_name</span><span class="p">,</span>
    <span class="n">o</span><span class="p">.</span><span class="n">order_id</span><span class="p">,</span>
    <span class="n">o</span><span class="p">.</span><span class="n">order_date</span>
<span class="k">FROM</span> <span class="n">customers</span> <span class="k">c</span>
<span class="k">RIGHT</span> <span class="k">JOIN</span> <span class="n">orders</span> <span class="n">o</span> <span class="k">ON</span> <span class="k">c</span><span class="p">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">o</span><span class="p">.</span><span class="n">customer_id</span><span class="p">;</span>

<span class="c1">-- FULL OUTER JOIN usage</span>
<span class="k">SELECT</span>
    <span class="k">c</span><span class="p">.</span><span class="n">customer_id</span><span class="p">,</span>
    <span class="k">c</span><span class="p">.</span><span class="n">first_name</span><span class="p">,</span>
    <span class="k">c</span><span class="p">.</span><span class="n">last_name</span><span class="p">,</span>
    <span class="n">o</span><span class="p">.</span><span class="n">order_id</span><span class="p">,</span>
    <span class="n">o</span><span class="p">.</span><span class="n">order_date</span>
<span class="k">FROM</span> <span class="n">customers</span> <span class="k">c</span>
<span class="k">FULL</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">orders</span> <span class="n">o</span> <span class="k">ON</span> <span class="k">c</span><span class="p">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">o</span><span class="p">.</span><span class="n">customer_id</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="window-functions">Window Functions</h3>

<table>
  <thead>
    <tr>
      <th>Function</th>
      <th>Description</th>
      <th>Syntax</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ROW_NUMBER()</code></td>
      <td>Assigns a unique number to each row within a partition</td>
      <td><code class="language-plaintext highlighter-rouge">ROW_NUMBER() OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">RANK()</code></td>
      <td>Assigns a rank to each row within a partition</td>
      <td><code class="language-plaintext highlighter-rouge">RANK() OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">DENSE_RANK()</code></td>
      <td>Assigns a dense rank to each row within a partition</td>
      <td><code class="language-plaintext highlighter-rouge">DENSE_RANK() OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AVG()</code></td>
      <td>Calculates the average of a column within a window</td>
      <td><code class="language-plaintext highlighter-rouge">AVG(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">COUNT()</code></td>
      <td>Calculates the count of rows within a window</td>
      <td><code class="language-plaintext highlighter-rouge">COUNT(*) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SUM()</code></td>
      <td>Calculates the sum of a column within a window</td>
      <td><code class="language-plaintext highlighter-rouge">SUM(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MIN()</code></td>
      <td>Calculates the minimum value of a column within a window</td>
      <td><code class="language-plaintext highlighter-rouge">MIN(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MAX()</code></td>
      <td>Calculates the maximum value of a column within a window</td>
      <td><code class="language-plaintext highlighter-rouge">MAX(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">FIRST_VALUE()</code></td>
      <td>Retrieves the first value within a window</td>
      <td><code class="language-plaintext highlighter-rouge">FIRST_VALUE(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">LAST_VALUE()</code></td>
      <td>Retrieves the last value within a window</td>
      <td><code class="language-plaintext highlighter-rouge">LAST_VALUE(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">NTILE()</code></td>
      <td>Divides a window into equal parts and assigns a number to each row</td>
      <td><code class="language-plaintext highlighter-rouge">NTILE(3) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">LAG()</code></td>
      <td>Retrieves the value from a previous row within a window</td>
      <td><code class="language-plaintext highlighter-rouge">LAG(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">LEAD()</code></td>
      <td>Retrieves the value from a subsequent row within a window</td>
      <td><code class="language-plaintext highlighter-rouge">LEAD(column) OVER (PARTITION BY column ORDER BY column)</code></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- ROW_NUMBER() usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">employee_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_num</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- RANK() usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">salary_rank</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- DENSE_RANK() usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">DENSE_RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">salary_dense_rank</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- AVG() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">AVG</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- COUNT() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">employee_count</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- SUM() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="n">salary</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">total_salary</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cumulative_salary</span><span class="p">,</span>
    <span class="n">salary</span> <span class="o">/</span> <span class="k">SUM</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">AS</span> <span class="n">salary_percentage</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- MIN() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="n">salary</span><span class="p">,</span>
    <span class="k">MIN</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- MAX() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="n">salary</span><span class="p">,</span>
    <span class="k">MAX</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">max_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- FIRST_VALUE() usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">highest_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- LAST_VALUE() usage</span>
    <span class="k">SELECT</span>
        <span class="n">employee_id</span><span class="p">,</span>
        <span class="n">first_name</span><span class="p">,</span>
        <span class="n">last_name</span><span class="p">,</span>
        <span class="n">LAST_VALUE</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">ASC</span> <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span><span class="p">)</span> <span class="k">AS</span> <span class="n">highest_salary</span>
    <span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- LAG() usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">salary</span><span class="p">,</span>
    <span class="n">LAG</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">previous_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>

<span class="c1">-- LEAD() usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">salary</span><span class="p">,</span>
    <span class="n">LEAD</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">next_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="ctes-common-table-expressions-and-subqueries">CTEs (Common Table Expressions) and Subqueries</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- CTE usage</span>
<span class="k">WITH</span> <span class="n">emp_dept</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">department_id</span><span class="p">,</span>
        <span class="k">AVG</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_salary</span>
    <span class="k">FROM</span> <span class="n">employees</span>
    <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department_id</span>
<span class="p">)</span>
<span class="k">SELECT</span>
    <span class="n">e</span><span class="p">.</span><span class="n">employee_id</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">first_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">last_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">salary</span><span class="p">,</span>
    <span class="k">c</span><span class="p">.</span><span class="n">avg_salary</span>
<span class="k">FROM</span> <span class="n">employees</span> <span class="n">e</span>
<span class="k">JOIN</span> <span class="n">emp_dept</span> <span class="k">c</span> <span class="k">ON</span> <span class="n">e</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">department_id</span><span class="p">;</span>

<span class="c1">-- Subquery usage</span>
<span class="k">SELECT</span>
    <span class="n">employee_id</span><span class="p">,</span>
    <span class="n">first_name</span><span class="p">,</span>
    <span class="n">last_name</span><span class="p">,</span>
    <span class="n">salary</span><span class="p">,</span>
    <span class="p">(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">employees</span> <span class="n">e1</span> <span class="k">WHERE</span> <span class="n">e1</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">department_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_department_salary</span>
<span class="k">FROM</span> <span class="n">employees</span> <span class="n">e</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="aggregations">Aggregations</h3>

<table>
  <thead>
    <tr>
      <th>Function</th>
      <th>Description</th>
      <th>Syntax</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">COUNT()</code></td>
      <td>Counts the number of rows in a group</td>
      <td><code class="language-plaintext highlighter-rouge">COUNT(*)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SUM()</code></td>
      <td>Calculates the sum of a column</td>
      <td><code class="language-plaintext highlighter-rouge">SUM(column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AVG()</code></td>
      <td>Calculates the average of a column</td>
      <td><code class="language-plaintext highlighter-rouge">AVG(column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MIN()</code></td>
      <td>Retrieves the minimum value of a column</td>
      <td><code class="language-plaintext highlighter-rouge">MIN(column)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MAX()</code></td>
      <td>Retrieves the maximum value of a column</td>
      <td><code class="language-plaintext highlighter-rouge">MAX(column)</code></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- COUNT() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">employee_count</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">;</span>

<span class="c1">-- SUM() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="n">total_salary</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">;</span>

<span class="c1">-- AVG() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">AVG</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="n">average_salary</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">;</span>

<span class="c1">-- MIN() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">MIN</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_salary</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">;</span>

<span class="c1">-- MAX() usage</span>
<span class="k">SELECT</span>
    <span class="n">department_id</span><span class="p">,</span>
    <span class="k">MAX</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="n">max_salary</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">;</span>
</code></pre></div></div>

<!-- 
Aggregations: COUNT(), SUM(), GROUP BY, HAVING
NULL Handling: COALESCE(), NULLIF()
String Functions: CONCAT(), SUBSTRING(), TRIM()
Date Functions: CURRENT_DATE, DATEADD(), DATEDIFF()
Conditional: CASE WHEN ... THEN ... ELSE ... END -->]]></content><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><category term="snowflake" /><category term="sql" /><category term="cheatsheet" /><summary type="html"><![CDATA[SQL Essentials]]></summary></entry><entry><title type="html">Python Core Cheatsheet</title><link href="http://shivishbrahma.github.io/publog/python-core-cheatsheet-3KV1r9AN/" rel="alternate" type="text/html" title="Python Core Cheatsheet" /><published>2025-07-25T04:58:40+00:00</published><updated>2025-07-25T04:58:40+00:00</updated><id>http://shivishbrahma.github.io/publog/python-core-cheatsheet-3KV1r9AN</id><content type="html" xml:base="http://shivishbrahma.github.io/publog/python-core-cheatsheet-3KV1r9AN/"><![CDATA[<h2 id="date-and-time">Date and Time</h2>

<h3 id="date-directives">Date Directives</h3>

<table>
  <thead>
    <tr>
      <th>Format</th>
      <th>Meaning</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%Y</code></td>
      <td>Year (4 digits)</td>
      <td><code class="language-plaintext highlighter-rouge">2025</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%y</code></td>
      <td>Year (2 digits)</td>
      <td><code class="language-plaintext highlighter-rouge">25</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%m</code></td>
      <td>Month (01-12)</td>
      <td><code class="language-plaintext highlighter-rouge">07</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%B</code></td>
      <td>Full month name</td>
      <td><code class="language-plaintext highlighter-rouge">July</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%b</code></td>
      <td>Abbreviated month name</td>
      <td><code class="language-plaintext highlighter-rouge">Jul</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%d</code></td>
      <td>Day of the month (01–31)</td>
      <td><code class="language-plaintext highlighter-rouge">17</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%j</code></td>
      <td>Day of year (001–366)</td>
      <td><code class="language-plaintext highlighter-rouge">198</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%A</code></td>
      <td>Full weekday name</td>
      <td><code class="language-plaintext highlighter-rouge">Thursday</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%a</code></td>
      <td>Abbreviated weekday name</td>
      <td><code class="language-plaintext highlighter-rouge">Thu</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%w</code></td>
      <td>Weekday as decimal (0=Sunday)</td>
      <td><code class="language-plaintext highlighter-rouge">4</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%U</code></td>
      <td>Week number (Sunday as first day)</td>
      <td><code class="language-plaintext highlighter-rouge">28</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%W</code></td>
      <td>Week number (Monday as first day)</td>
      <td><code class="language-plaintext highlighter-rouge">28</code></td>
    </tr>
  </tbody>
</table>

<h3 id="time-directives">Time Directives</h3>

<table>
  <thead>
    <tr>
      <th>Format</th>
      <th>Meaning</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%H</code></td>
      <td>Hour (24-hour clock, 00–23)</td>
      <td><code class="language-plaintext highlighter-rouge">18</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%I</code></td>
      <td>Hour (12-hour clock, 01–12)</td>
      <td><code class="language-plaintext highlighter-rouge">06</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%p</code></td>
      <td>AM or PM</td>
      <td><code class="language-plaintext highlighter-rouge">PM</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%M</code></td>
      <td>Minute (00–59)</td>
      <td><code class="language-plaintext highlighter-rouge">45</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%S</code></td>
      <td>Second (00–59)</td>
      <td><code class="language-plaintext highlighter-rouge">30</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%f</code></td>
      <td>Microsecond (000000–999999)</td>
      <td><code class="language-plaintext highlighter-rouge">123456</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%z</code></td>
      <td>UTC offset</td>
      <td><code class="language-plaintext highlighter-rouge">+0530</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%Z</code></td>
      <td>Time zone name</td>
      <td><code class="language-plaintext highlighter-rouge">IST</code></td>
    </tr>
  </tbody>
</table>

<h2 id="data-types-and-structures">Data Types and Structures</h2>

<h3 id="string">String</h3>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Purpose</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.upper()</code></td>
      <td>Convert to uppercase</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".upper()</code> → <code class="language-plaintext highlighter-rouge">"HELLO"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.lower()</code></td>
      <td>Convert to lowercase</td>
      <td><code class="language-plaintext highlighter-rouge">"HELLO".lower()</code> → <code class="language-plaintext highlighter-rouge">"hello"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.title()</code></td>
      <td>Convert to title case</td>
      <td><code class="language-plaintext highlighter-rouge">"hello world".title()</code> → <code class="language-plaintext highlighter-rouge">"Hello World"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.capitalize()</code></td>
      <td>Capitalize first letter</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".capitalize()</code> → <code class="language-plaintext highlighter-rouge">"Hello"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.strip()</code></td>
      <td>Remove whitespace from both ends</td>
      <td><code class="language-plaintext highlighter-rouge">"  hello  ".strip()</code> → <code class="language-plaintext highlighter-rouge">"hello"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.split(sep)</code></td>
      <td>Split string into list</td>
      <td><code class="language-plaintext highlighter-rouge">"a,b,c".split(",")</code> → <code class="language-plaintext highlighter-rouge">["a", "b", "c"]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.join(iterable)</code></td>
      <td>Join iterable into string</td>
      <td><code class="language-plaintext highlighter-rouge">",".join(["a", "b", "c"])</code> → <code class="language-plaintext highlighter-rouge">"a,b,c"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.replace(old, new)</code></td>
      <td>Replace substring</td>
      <td><code class="language-plaintext highlighter-rouge">"hello world".replace("world", "Python")</code> → <code class="language-plaintext highlighter-rouge">"hello Python"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.find(sub)</code></td>
      <td>Find substring index</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".find("e")</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.count(sub)</code></td>
      <td>Count occurrences of substring</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".count("l")</code> → <code class="language-plaintext highlighter-rouge">2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.startswith(prefix)</code></td>
      <td>Check if string starts with prefix</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".startswith("he")</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.endswith(suffix)</code></td>
      <td>Check if string ends with suffix</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".endswith("lo")</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.isdigit()</code></td>
      <td>Check if string is a digit</td>
      <td><code class="language-plaintext highlighter-rouge">"123".isdigit()</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.isalpha()</code></td>
      <td>Check if string is alphabetic</td>
      <td><code class="language-plaintext highlighter-rouge">"abc".isalpha()</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.isalnum()</code></td>
      <td>Check if string is alphanumeric</td>
      <td><code class="language-plaintext highlighter-rouge">"abc123".isalnum()</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.islower()</code></td>
      <td>Check if string is lowercase</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".islower()</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.isupper()</code></td>
      <td>Check if string is uppercase</td>
      <td><code class="language-plaintext highlighter-rouge">"HELLO".isupper()</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.isprintable()</code></td>
      <td>Check if string is printable</td>
      <td><code class="language-plaintext highlighter-rouge">"hello".isprintable()</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.swapcase()</code></td>
      <td>Swap case of all characters</td>
      <td><code class="language-plaintext highlighter-rouge">"Hello World".swapcase()</code> → <code class="language-plaintext highlighter-rouge">"hELLO wORLD"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">str.zfill(width)</code></td>
      <td>Pad string with zeros on the left</td>
      <td><code class="language-plaintext highlighter-rouge">"42".zfill(5)</code> → <code class="language-plaintext highlighter-rouge">"00042"</code></td>
    </tr>
  </tbody>
</table>

<h3 id="list">List</h3>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Purpose</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.append(item)</code></td>
      <td>Add item to end of list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2].append(3)</code> → <code class="language-plaintext highlighter-rouge">[1, 2, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.extend(iterable)</code></td>
      <td>Extend list with iterable</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2].extend([3, 4])</code> → <code class="language-plaintext highlighter-rouge">[1, 2, 3, 4]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.insert(index, item)</code></td>
      <td>Insert item at index</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2].insert(1, 1.5)</code> → <code class="language-plaintext highlighter-rouge">[1, 1.5, 2]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.remove(item)</code></td>
      <td>Remove first occurrence of item</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].remove(2)</code> → <code class="language-plaintext highlighter-rouge">[1, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.pop(index)</code></td>
      <td>Remove and return item at index</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].pop(1)</code> → <code class="language-plaintext highlighter-rouge">2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.clear()</code></td>
      <td>Remove all items from list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].clear()</code> → <code class="language-plaintext highlighter-rouge">[]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.index(item)</code></td>
      <td>Return index of first occurrence</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].index(2)</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.count(item)</code></td>
      <td>Count occurrences of item</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].count(2)</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.sort()</code></td>
      <td>Sort list in place</td>
      <td><code class="language-plaintext highlighter-rouge">[3, 1, 2].sort()</code> → <code class="language-plaintext highlighter-rouge">[1, 2, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.reverse()</code></td>
      <td>Reverse list in place</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].reverse()</code> → <code class="language-plaintext highlighter-rouge">[3, 2, 1]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.copy()</code></td>
      <td>Return shallow copy of list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].copy()</code> → <code class="language-plaintext highlighter-rouge">[1, 2, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.index(item, start, end)</code></td>
      <td>Return index of item in range</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3].index(2, 0, 3)</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list.sort(key=None, reverse=False)</code></td>
      <td>Sort list with optional key and reverse</td>
      <td><code class="language-plaintext highlighter-rouge">[3, 1, 2].sort(key=lambda x: -x)</code> → <code class="language-plaintext highlighter-rouge">[3, 2, 1]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[0]</code></td>
      <td>Access first element of list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3][0]</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[-1]</code></td>
      <td>Access last element of list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3][-1]</code> → <code class="language-plaintext highlighter-rouge">3</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[1:3]</code></td>
      <td>Slice list from index 1 to 2</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3][1:3]</code> → <code class="language-plaintext highlighter-rouge">[2, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[:2]</code></td>
      <td>Slice list from start to index 1</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3][:2]</code> → <code class="language-plaintext highlighter-rouge">[1, 2]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[1:]</code></td>
      <td>Slice list from index 1 to end</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3][1:]</code> → <code class="language-plaintext highlighter-rouge">[2, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[::2]</code></td>
      <td>Slice list with step 2</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3, 4][::2]</code> → <code class="language-plaintext highlighter-rouge">[1, 3]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list[::-1]</code></td>
      <td>Reverse list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2, 3][::-1]</code> → <code class="language-plaintext highlighter-rouge">[3, 2, 1]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list * 2</code></td>
      <td>Repeat list</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2] * 2</code> → <code class="language-plaintext highlighter-rouge">[1, 2, 1, 2]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a_list + b_list</code></td>
      <td>Concatenate lists</td>
      <td><code class="language-plaintext highlighter-rouge">[1, 2] + [3, 4]</code> → <code class="language-plaintext highlighter-rouge">[1, 2, 3, 4]</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">len(a_list)</code></td>
      <td>Get length of list</td>
      <td><code class="language-plaintext highlighter-rouge">len([1, 2, 3])</code> → <code class="language-plaintext highlighter-rouge">3</code></td>
    </tr>
  </tbody>
</table>

<h2 id="dictionary">Dictionary</h2>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Purpose</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict[key]</code></td>
      <td>Access value by key</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}["a"]</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict[key] = value</code></td>
      <td>Set value for key</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}["c"] = 3</code> → <code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2, "c": 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.get(key, default)</code></td>
      <td>Get value by key with default</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1}.get("b", 0)</code> → <code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.keys()</code></td>
      <td>Get all keys</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.keys()</code> → <code class="language-plaintext highlighter-rouge">dict_keys(['a', 'b'])</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.values()</code></td>
      <td>Get all values</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.values()</code> → <code class="language-plaintext highlighter-rouge">dict_values([1, 2])</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.items()</code></td>
      <td>Get all key-value pairs</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.items()</code> → <code class="language-plaintext highlighter-rouge">dict_items([('a', 1), ('b', 2)])</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.pop(key)</code></td>
      <td>Remove and return value by key</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.pop("a")</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.popitem()</code></td>
      <td>Remove and return last key-value pair</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.popitem()</code> → <code class="language-plaintext highlighter-rouge">('b', 2)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.clear()</code></td>
      <td>Clear dictionary</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.clear()</code> → <code class="language-plaintext highlighter-rouge">{}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.update(other_dict)</code></td>
      <td>Update with another dictionary</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1}.update({"b": 2})</code> → <code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.copy()</code></td>
      <td>Return shallow copy of dictionary</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}.copy()</code> → <code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.fromkeys(keys, value)</code></td>
      <td>Create dictionary with keys and value</td>
      <td><code class="language-plaintext highlighter-rouge">dict.fromkeys(["a", "b"], 0)</code> → <code class="language-plaintext highlighter-rouge">{"a": 0, "b": 0}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">key in dict</code></td>
      <td>Check if key exists</td>
      <td><code class="language-plaintext highlighter-rouge">"a" in {"a": 1, "b": 2}</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict.setdefault(key, default)</code></td>
      <td>Get value or set default if key not exists</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1}.setdefault("b", 2)</code> → <code class="language-plaintext highlighter-rouge">2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dict1 \| dict2</code></td>
      <td>Merge two dictionaries</td>
      <td><code class="language-plaintext highlighter-rouge">{"a": 1} \| {"b": 2}</code> → <code class="language-plaintext highlighter-rouge">{"a": 1, "b": 2}</code></td>
    </tr>
  </tbody>
</table>

<h2 id="set">Set</h2>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Purpose</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set([1, 2, 3])</code></td>
      <td>Create set from list</td>
      <td><code class="language-plaintext highlighter-rouge">set([1, 2, 3])</code> → <code class="language-plaintext highlighter-rouge">{1, 2, 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.add(item)</code></td>
      <td>Add item to set</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.add(3)</code> → <code class="language-plaintext highlighter-rouge">{1, 2, 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.remove(item)</code></td>
      <td>Remove item from set</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2, 3}.remove(2)</code> → <code class="language-plaintext highlighter-rouge">{1, 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.discard(item)</code></td>
      <td>Remove item if exists</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2, 3}.discard(2)</code> → <code class="language-plaintext highlighter-rouge">{1, 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.pop()</code></td>
      <td>Remove and return arbitrary item</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2, 3}.pop()</code> → <code class="language-plaintext highlighter-rouge">1</code> (or <code class="language-plaintext highlighter-rouge">2</code> or <code class="language-plaintext highlighter-rouge">3</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.clear()</code></td>
      <td>Remove all items from set</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2, 3}.clear()</code> → <code class="language-plaintext highlighter-rouge">set()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.union(other_set)</code></td>
      <td>Union of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.union({3, 4})</code> → <code class="language-plaintext highlighter-rouge">{1, 2, 3, 4}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.intersection(other_set)</code></td>
      <td>Intersection of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.intersection({2, 3})</code> → <code class="language-plaintext highlighter-rouge">{2}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.difference(other_set)</code></td>
      <td>Difference of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.difference({2, 3})</code> → <code class="language-plaintext highlighter-rouge">{1}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.symmetric_difference(other_set)</code></td>
      <td>Symmetric difference of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.symmetric_difference({2, 3})</code> → <code class="language-plaintext highlighter-rouge">{1, 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.issubset(other_set)</code></td>
      <td>Check if set is subset</td>
      <td><code class="language-plaintext highlighter-rouge">{1}.issubset({1, 2})</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.issuperset(other_set)</code></td>
      <td>Check if set is superset</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.issuperset({1})</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.copy()</code></td>
      <td>Return shallow copy of set</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.copy()</code> → <code class="language-plaintext highlighter-rouge">{1, 2}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.update(other_set)</code></td>
      <td>Update set with another set</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.update({3, 4})</code> → <code class="language-plaintext highlighter-rouge">{1, 2, 3, 4}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.intersection_update(other_set)</code></td>
      <td>Update set with intersection</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.intersection_update({2, 3})</code> → <code class="language-plaintext highlighter-rouge">{2}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.difference_update(other_set)</code></td>
      <td>Update set with difference</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.difference_update({2, 3})</code> → <code class="language-plaintext highlighter-rouge">{1}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set.symmetric_difference_update(other_set)</code></td>
      <td>Update set with symmetric difference</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2}.symmetric_difference_update({2, 3})</code> → <code class="language-plaintext highlighter-rouge">{1, 3}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">len(set)</code></td>
      <td>Get number of items in set</td>
      <td><code class="language-plaintext highlighter-rouge">len({1, 2, 3})</code> → <code class="language-plaintext highlighter-rouge">3</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">item in set</code></td>
      <td>Check if item exists in set</td>
      <td><code class="language-plaintext highlighter-rouge">1 in {1, 2, 3}</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set1 \| set2</code></td>
      <td>Union of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2} \| {3, 4}</code> → <code class="language-plaintext highlighter-rouge">{1, 2, 3, 4}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set1 &amp; set2</code></td>
      <td>Intersection of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2} &amp; {2, 3}</code> → <code class="language-plaintext highlighter-rouge">{2}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set1 - set2</code></td>
      <td>Difference of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2} - {2, 3}</code> → <code class="language-plaintext highlighter-rouge">{1}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">set1 ^ set2</code></td>
      <td>Symmetric difference of two sets</td>
      <td><code class="language-plaintext highlighter-rouge">{1, 2} ^ {2, 3}</code> → <code class="language-plaintext highlighter-rouge">{1, 3}</code></td>
    </tr>
  </tbody>
</table>

<h2 id="tuple">Tuple</h2>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Purpose</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple([1, 2, 3])</code></td>
      <td>Create tuple from list</td>
      <td><code class="language-plaintext highlighter-rouge">tuple([1, 2, 3])</code> → <code class="language-plaintext highlighter-rouge">(1, 2, 3)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple.count(item)</code></td>
      <td>Count occurrences of item</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3).count(2)</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple.index(item)</code></td>
      <td>Return index of first occurrence</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3).index(2)</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">len(tuple)</code></td>
      <td>Get length of tuple</td>
      <td><code class="language-plaintext highlighter-rouge">len((1, 2, 3))</code> → <code class="language-plaintext highlighter-rouge">3</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">item in tuple</code></td>
      <td>Check if item exists in tuple</td>
      <td><code class="language-plaintext highlighter-rouge">1 in (1, 2, 3)</code> → <code class="language-plaintext highlighter-rouge">True</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple1 + tuple2</code></td>
      <td>Concatenate two tuples</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2) + (3, 4)</code> → <code class="language-plaintext highlighter-rouge">(1, 2, 3, 4)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple1 * n</code></td>
      <td>Repeat tuple n times</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2) * 2</code> → <code class="language-plaintext highlighter-rouge">(1, 2, 1, 2)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[0]</code></td>
      <td>Access first element of tuple</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3)[0]</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[-1]</code></td>
      <td>Access last element of tuple</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3)[-1]</code> → <code class="language-plaintext highlighter-rouge">3</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[1:3]</code></td>
      <td>Slice tuple from index 1 to 2</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3)[1:3]</code> → <code class="language-plaintext highlighter-rouge">(2, 3)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[:2]</code></td>
      <td>Slice tuple from start to index 1</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3)[:2]</code> → <code class="language-plaintext highlighter-rouge">(1, 2)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[1:]</code></td>
      <td>Slice tuple from index 1 to end</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3)[1:]</code> → <code class="language-plaintext highlighter-rouge">(2, 3)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[::2]</code></td>
      <td>Slice tuple with step 2</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3, 4)[::2]</code> → <code class="language-plaintext highlighter-rouge">(1, 3)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple[::-1]</code></td>
      <td>Reverse tuple</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3)[::-1]</code> → <code class="language-plaintext highlighter-rouge">(3, 2, 1)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tuple.index(item, start, end)</code></td>
      <td>Return index of item in range</td>
      <td><code class="language-plaintext highlighter-rouge">(1, 2, 3).index(2, 0, 3)</code> → <code class="language-plaintext highlighter-rouge">1</code></td>
    </tr>
  </tbody>
</table>

<h3 id="utility-functions">Utility Functions</h3>

<table>
  <thead>
    <tr>
      <th>Function</th>
      <th>Use</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">print()</code></td>
      <td>Display output</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">max()</code></td>
      <td>Largest value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">min()</code></td>
      <td>Smallest value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sum()</code></td>
      <td>Sum of values</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">round()</code></td>
      <td>Round to decimals</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">len()</code></td>
      <td>Count elements</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sorted()</code></td>
      <td>Sort values</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">help()</code></td>
      <td>Documentation</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">type()</code></td>
      <td>Get type</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">dir()</code></td>
      <td>List attributes</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">id()</code></td>
      <td>Get object ID</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><category term="python" /><category term="cheatsheet" /><summary type="html"><![CDATA[Date and Time]]></summary></entry><entry><title type="html">Top SQL Interview Questions</title><link href="http://shivishbrahma.github.io/publog/top-sql-interview-questions-Y7x8i1fB/" rel="alternate" type="text/html" title="Top SQL Interview Questions" /><published>2025-06-27T05:39:04+00:00</published><updated>2025-06-27T05:39:04+00:00</updated><id>http://shivishbrahma.github.io/publog/top-sql-interview-questions-Y7x8i1fB</id><content type="html" xml:base="http://shivishbrahma.github.io/publog/top-sql-interview-questions-Y7x8i1fB/"><![CDATA[<ol>
  <li>
    <p>Write an SQL query to fetch the second-highest salary from an <code class="language-plaintext highlighter-rouge">employees</code> table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="n">SecondHighestSalary</span>
 <span class="k">FROM</span> <span class="n">employees</span>
 <span class="k">WHERE</span> <span class="n">salary</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">employees</span><span class="p">);</span>
</code></pre></div>    </div>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="n">salary</span> <span class="k">AS</span> <span class="n">SecondHighestSalary</span>
 <span class="k">FROM</span> <span class="n">employees</span>
 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span>
 <span class="k">LIMIT</span> <span class="mi">1</span> <span class="k">OFFSET</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="n">salary</span> <span class="k">AS</span> <span class="n">SecondHighestSalary</span>
 <span class="k">FROM</span> <span class="p">(</span>
     <span class="k">SELECT</span> <span class="n">salary</span><span class="p">,</span> <span class="n">row_number</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span>
     <span class="k">FROM</span> <span class="n">employees</span>
 <span class="p">)</span> <span class="k">AS</span> <span class="n">RankedSalaries</span>
 <span class="k">WHERE</span> <span class="n">rank</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to get the duplicate records from a table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="k">column_name</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="k">count</span>
 <span class="k">FROM</span> <span class="k">table_name</span>
 <span class="k">GROUP</span> <span class="k">BY</span> <span class="k">column_name</span>
 <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to find the employees who earn more than their managers.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="n">e1</span><span class="p">.</span><span class="o">*</span>
 <span class="k">FROM</span> <span class="n">employees</span> <span class="n">e1</span>
 <span class="k">JOIN</span> <span class="n">employees</span> <span class="n">e2</span> <span class="k">ON</span> <span class="n">e1</span><span class="p">.</span><span class="n">manager_id</span> <span class="o">=</span> <span class="n">e2</span><span class="p">.</span><span class="n">id</span>
 <span class="k">WHERE</span> <span class="n">e1</span><span class="p">.</span><span class="n">salary</span> <span class="o">&gt;</span> <span class="n">e2</span><span class="p">.</span><span class="n">salary</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to retrieve the top <code class="language-plaintext highlighter-rouge">N</code> records from a table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="o">*</span>
 <span class="k">FROM</span> <span class="k">table_name</span>
 <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">column_name</span> <span class="k">DESC</span>
 <span class="k">LIMIT</span> <span class="n">N</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to count the number of employees in each department.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="n">department</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">employee_count</span>
 <span class="k">FROM</span> <span class="n">employees</span>
 <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to find the department with the highest number of employees.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="n">department</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">employee_count</span>
 <span class="k">FROM</span> <span class="n">employees</span>
 <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">department</span>
 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">employee_count</span> <span class="k">DESC</span>
 <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to retrieve employees who have the same salary.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="n">e1</span><span class="p">.</span><span class="o">*</span>
 <span class="k">FROM</span> <span class="n">employees</span> <span class="n">e1</span>
 <span class="k">JOIN</span> <span class="n">employees</span> <span class="n">e2</span> <span class="k">ON</span> <span class="n">e1</span><span class="p">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">e2</span><span class="p">.</span><span class="n">salary</span>
 <span class="k">WHERE</span> <span class="n">e1</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="n">e2</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to list all employees whose name starts with ‘A’.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="o">*</span>
 <span class="k">FROM</span> <span class="n">employees</span>
 <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">'A%'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to get the last record from a table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="o">*</span>
 <span class="k">FROM</span> <span class="n">employees</span>
 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">employee_id</span> <span class="k">DESC</span>
 <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to get employees who joined in the last 6 months.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">WHERE</span> <span class="n">join_date</span> <span class="o">&gt;=</span> <span class="n">DATE_SUB</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="mi">6</span> <span class="k">MONTH</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to find the <code class="language-plaintext highlighter-rouge">Nth</code> highest salary from a table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">salary</span> <span class="k">AS</span> <span class="n">NthHighestSalary</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">1</span> <span class="k">OFFSET</span> <span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">salary</span> <span class="k">AS</span> <span class="n">NthHighestSalary</span>
<span class="k">FROM</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">salary</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span>
    <span class="k">FROM</span> <span class="n">employees</span>
<span class="p">)</span> <span class="k">AS</span> <span class="n">RankedSalaries</span>
<span class="k">WHERE</span> <span class="n">rank</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to remove duplicate rows from a table without using <code class="language-plaintext highlighter-rouge">DISTINCT</code>.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">sales</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">id</span>
    <span class="k">FROM</span> <span class="p">(</span>
        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">order_date</span><span class="p">,</span> <span class="n">product_name</span><span class="p">,</span> <span class="n">customer_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rnk</span>
    <span class="p">)</span> <span class="k">AS</span> <span class="n">RankedSales</span>
    <span class="k">WHERE</span> <span class="n">rnk</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to find missing numbers in a sequence of IDs.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">t1</span><span class="p">.</span><span class="n">id</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">MissingID</span>
<span class="k">FROM</span> <span class="n">employees</span> <span class="n">t1</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">employees</span> <span class="n">t2</span> <span class="k">ON</span> <span class="n">t1</span><span class="p">.</span><span class="n">id</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">=</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span>
<span class="k">WHERE</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span> <span class="k">IS</span> <span class="k">NULL</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">MissingID</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to display the first and last name in a single column.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">CONCAT</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">full_name</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to get the cumulative sum of salaries for each employee.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cumulative_salary</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to swap the values of two columns without using a third variable.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="n">employees</span>
<span class="k">SET</span> <span class="n">column1</span> <span class="o">=</span> <span class="n">column2</span><span class="p">,</span> <span class="n">column2</span> <span class="o">=</span> <span class="n">column1</span>
<span class="k">WHERE</span> <span class="n">condition</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to fetch employees whose names contain only vowels.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">WHERE</span> <span class="n">name</span> <span class="n">REGEXP</span> <span class="s1">'^[aeiouAEIOU]+$'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to transpose rows into columns.</p>

    <table>
      <thead>
        <tr>
          <th>Year</th>
          <th>Product</th>
          <th>Amount</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>2023</td>
          <td>A</td>
          <td>100</td>
        </tr>
        <tr>
          <td>2023</td>
          <td>B</td>
          <td>150</td>
        </tr>
        <tr>
          <td>2024</td>
          <td>A</td>
          <td>200</td>
        </tr>
        <tr>
          <td>2024</td>
          <td>B</td>
          <td>250</td>
        </tr>
      </tbody>
    </table>

    <table>
      <thead>
        <tr>
          <th>Year</th>
          <th>Product_A</th>
          <th>Product_B</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>2023</td>
          <td>100</td>
          <td>150</td>
        </tr>
        <tr>
          <td>2024</td>
          <td>200</td>
          <td>250</td>
        </tr>
      </tbody>
    </table>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="nb">Year</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">Product</span> <span class="o">=</span> <span class="s1">'A'</span> <span class="k">THEN</span> <span class="n">Amount</span> <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">Product_A</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">Product</span> <span class="o">=</span> <span class="s1">'B'</span> <span class="k">THEN</span> <span class="n">Amount</span> <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">Product_B</span>
<span class="k">FROM</span> 
    <span class="n">Sales</span>
<span class="k">GROUP</span> <span class="k">BY</span> 
    <span class="nb">Year</span>
<span class="k">ORDER</span> <span class="k">BY</span> 
    <span class="nb">Year</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to find the employees with the highest salary in each department.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">department</span><span class="p">,</span> <span class="n">salary</span>
<span class="k">FROM</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">e</span><span class="p">.</span><span class="o">*</span><span class="p">,</span>
        <span class="n">RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">as</span> <span class="n">rnk</span>
    <span class="k">FROM</span> <span class="n">employees</span> <span class="n">e</span>
<span class="p">)</span> <span class="n">sub</span>
<span class="k">WHERE</span> <span class="n">rnk</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to find customers who made multiple purchases on the same day.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customer_id</span><span class="p">,</span> <span class="n">order_date</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_count</span>
<span class="k">FROM</span> <span class="n">orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">customer_id</span><span class="p">,</span> <span class="n">order_date</span>
<span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to get the moving average of sales for the last 3 months.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="k">month</span><span class="p">,</span>
    <span class="k">AVG</span><span class="p">(</span><span class="n">sales</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">month</span> <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">2</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span><span class="p">)</span> <span class="k">AS</span> <span class="n">moving_average</span>
<span class="k">FROM</span> <span class="n">Sales</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="k">month</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to rank employees by salary in each department.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">id</span><span class="p">,</span> 
    <span class="n">name</span><span class="p">,</span> 
    <span class="n">department</span><span class="p">,</span> 
    <span class="n">salary</span><span class="p">,</span> 
    <span class="n">RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">department</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">salary_rank</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to find employees who have more than one manager.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">manager_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">manager_count</span>
<span class="k">FROM</span> <span class="n">employee_managers</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">employee_id</span>
<span class="k">HAVING</span> <span class="n">manager_count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to retrieve the most frequent order date from an <code class="language-plaintext highlighter-rouge">orders</code> table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">order_date</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">order_count</span>
<span class="k">FROM</span> <span class="n">orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">order_date</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">order_count</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to compare two tables and find mismatched records.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">TableA</span> <span class="n">a</span>
<span class="k">FULL</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">TableB</span> <span class="n">b</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">id</span>
<span class="k">WHERE</span> <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="k">IS</span> <span class="k">NULL</span> <span class="k">OR</span> <span class="n">b</span><span class="p">.</span><span class="n">id</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to calculate the difference between consecutive rows.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">id</span><span class="p">,</span> 
    <span class="n">value</span><span class="p">,</span>
    <span class="n">value</span> <span class="o">-</span> <span class="n">LAG</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">difference</span>
<span class="k">FROM</span> <span class="n">TableName</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to pivot table data dynamically.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Outer SELECT to choose all columns resulting from the PIVOT operation</span>
<span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="p">(</span>
    <span class="c1">-- Inner SELECT to retrieve the raw data of city, year, and sales</span>
    <span class="k">SELECT</span> <span class="n">city</span><span class="p">,</span> <span class="nb">year</span><span class="p">,</span> <span class="n">sales</span>
    <span class="k">FROM</span> <span class="n">sales</span>
<span class="p">)</span>
<span class="c1">-- PIVOT operation to convert rows to columns</span>
<span class="n">PIVOT</span> <span class="p">(</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">sales</span><span class="p">)</span> 
    <span class="c1">-- Specify the year values to pivot and alias them as Sales_&lt;year&gt;</span>
    <span class="k">FOR</span> <span class="nb">year</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">2019</span> <span class="k">AS</span> <span class="n">Sales_2019</span><span class="p">,</span> <span class="mi">2020</span> <span class="k">AS</span> <span class="n">Sales_2020</span><span class="p">,</span> <span class="mi">2021</span> <span class="k">AS</span> <span class="n">Sales_2021</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">city</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to delete every alternate row from a table.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span> <span class="n">CTE</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="o">*</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_num</span>
    <span class="k">FROM</span> <span class="k">table_name</span>
<span class="p">)</span>
<span class="k">DELETE</span> <span class="k">FROM</span> <span class="k">table_name</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">id</span> <span class="k">FROM</span> <span class="n">CTE</span> <span class="k">WHERE</span> <span class="n">row_num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to get the first purchase date for each customer.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customer_id</span><span class="p">,</span> <span class="k">MIN</span><span class="p">(</span><span class="n">ordered_at</span><span class="p">)</span> <span class="k">AS</span> <span class="n">first_purchase_date</span>
<span class="k">FROM</span> <span class="n">orders</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">customer_id</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to get the running total of sales per month.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span> <span class="n">MonthlySales</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> 
        <span class="k">month</span><span class="p">,</span>
        <span class="k">count</span><span class="p">(</span><span class="k">distinct</span> <span class="n">order_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">monthly_sales</span>
    <span class="k">FROM</span> <span class="n">orders</span>
    <span class="k">WHERE</span> <span class="n">ordered_at</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>
    <span class="k">AND</span> <span class="n">cancelled_at</span> <span class="k">IS</span> <span class="k">NULL</span>
    <span class="k">GROUP</span> <span class="k">BY</span> <span class="k">month</span>
<span class="p">)</span>
<span class="k">SELECT</span> 
    <span class="k">month</span><span class="p">,</span>
    <span class="n">monthly_sales</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">monthly_sales</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">month</span><span class="p">)</span> <span class="k">AS</span> <span class="n">running_total</span>
<span class="k">FROM</span> <span class="n">MonthlySales</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="k">month</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to assign a rank to employees based on their salaries.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">id</span><span class="p">,</span> 
    <span class="n">name</span><span class="p">,</span> 
    <span class="n">salary</span><span class="p">,</span>
    <span class="n">RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">salary_rank</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to find the percentage contribution of each employee’s salary to the total salary.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">id</span><span class="p">,</span> 
    <span class="n">name</span><span class="p">,</span> 
    <span class="n">salary</span><span class="p">,</span>
    <span class="p">(</span><span class="n">salary</span> <span class="o">/</span> <span class="k">SUM</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">())</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">AS</span> <span class="n">salary_percentage</span>
<span class="k">FROM</span> <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write a query to find the cumulative sum of sales using a window function.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">order_date</span><span class="p">,</span>
    <span class="n">sales_amount</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">sales_amount</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">order_date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cumulative_sales</span>
<span class="k">FROM</span> <span class="n">orders</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to get the difference between two consecutive transactions.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">id</span><span class="p">,</span> 
    <span class="n">transaction_date</span><span class="p">,</span> 
    <span class="n">amount</span><span class="p">,</span>
    <span class="n">amount</span> <span class="o">-</span> <span class="n">LAG</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">transaction_date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">transaction_difference</span>
<span class="k">FROM</span> <span class="n">transactions</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Write an SQL query to find the <code class="language-plaintext highlighter-rouge">LEAD()</code> and <code class="language-plaintext highlighter-rouge">LAG()</code> salary for each employee.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> 
    <span class="n">id</span><span class="p">,</span> 
    <span class="n">name</span><span class="p">,</span> 
    <span class="n">salary</span><span class="p">,</span>
    <span class="n">LEAD</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">next_salary</span><span class="p">,</span>
    <span class="n">LAG</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">previous_salary</span>
<span class="k">FROM</span>
    <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><category term="sql" /><category term="interview" /><category term="mysql" /><category term="postgresql" /><summary type="html"><![CDATA[Write an SQL query to fetch the second-highest salary from an employees table.]]></summary></entry><entry><title type="html">Nano Shortcuts - Beginner Friendly Editor</title><link href="http://shivishbrahma.github.io/publog/nano-shortcuts-beginner-friendly-editor-z0aLs1CC/" rel="alternate" type="text/html" title="Nano Shortcuts - Beginner Friendly Editor" /><published>2025-01-06T04:54:09+00:00</published><updated>2025-01-06T04:54:09+00:00</updated><id>http://shivishbrahma.github.io/publog/nano-shortcuts-beginner-friendly-editor-z0aLs1CC</id><content type="html" xml:base="http://shivishbrahma.github.io/publog/nano-shortcuts-beginner-friendly-editor-z0aLs1CC/"><![CDATA[<p>When it comes to text editing in the terminal, Nano stands out. It is user-friendly and simple. Nano’s straightforward interface makes it an excellent choice for anyone from novice to expert. In this blog post, we will explore essential Nano shortcuts. These will help you navigate and use this powerful text editor with ease.</p>

<h2 id="what-is-nano">What is Nano?</h2>

<p>Nano is a command-line text editor, found in most Unix-like operating systems. It is simple in design and easy to use, which makes it an ideal choice for beginners, unlike Vim or Emacs. You can create, edit, and save text files directly from the terminal with Nano. It makes a valuable tool for developers, system administrators, or any text file editor.</p>

<h2 id="getting-started-with-nano">Getting Started with Nano</h2>

<p>To open a file in Nano, type <code class="language-plaintext highlighter-rouge">nano filename.txt</code> in your terminal. Replace <code class="language-plaintext highlighter-rouge">filename.txt</code> with the name of the file to be edited. If the file does not exist, Nano will create a new one. Once in Nano, the text editor interface is visible. A list of shortcuts will appear at the bottom of the screen.</p>

<h2 id="essential-nano-shortcuts">Essential Nano Shortcuts</h2>

<p>Below are some useful shortcuts to get started with Nano:</p>

<h3 id="basic-commands">Basic Commands</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">^G</code></strong>: Display help text. This is a great way to learn about available commands.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^X</code></strong>: Exit Nano. For unsaved changes, Nano will prompt to save them.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^O</code></strong>: Write (save) the current file. Prompts to confirm the filename.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^R</code></strong>: Read a file into the current buffer. Allows to insert the contents of another file.</li>
</ul>

<h3 id="navigation-shortcuts">Navigation Shortcuts</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">^P</code></strong>: Move to the previous line.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^N</code></strong>: Move to the next line.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^A</code></strong>: Move to the beginning of the current line.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^E</code></strong>: Move to the end of the current line.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^B</code></strong>: Move backward one character.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^F</code></strong>: Move forward one character.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^Y</code></strong>: Move up one page.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^V</code></strong>: Move down one page.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^C</code></strong>: Display the current cursor position (line and column).</li>
</ul>

<h3 id="text-manipulation-shortcuts">Text Manipulation Shortcuts</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">^D</code></strong>: Delete the character under the cursor.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^H</code></strong>: Delete the character before the cursor (similar to backspace).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^K</code></strong>: Cut the current line and add it to the cut buffer.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^U</code></strong>: Uncut (paste) the last cut line.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^T</code></strong>: Invoke the spell checker (if available).</li>
</ul>

<h3 id="searching-and-replacing">Searching and Replacing</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">^W</code></strong>: Search for text within the file. Enter the text to be found.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^\\</code></strong>: Search and replace text. Allows to find specific text and replace it.</li>
</ul>

<h3 id="miscellaneous-shortcuts">Miscellaneous Shortcuts</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">^L</code></strong>: Refresh the screen. This can be useful if the display becomes cluttered.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^Z</code></strong>: Suspend Nano (if supported by your terminal).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">^S</code></strong>: Save the current file without exiting.</li>
</ul>

<h2 id="tips-for-using-nano">Tips for Using Nano</h2>

<ol>
  <li>
    <p><strong>Practice Makes Perfect</strong>: The best way to become proficient with Nano is to practice. Try editing different types of files and experimenting with shortcuts.</p>
  </li>
  <li>
    <p><strong>Use the Help Command</strong>: Use the <code class="language-plaintext highlighter-rouge">^G</code> command to access the help menu. It provides a comprehensive list of shortcuts.</p>
  </li>
  <li>
    <p><strong>Customize Your Experience</strong>: Create a <code class="language-plaintext highlighter-rouge">.nanorc</code> file in the home directory. Allows to customize Nano’s behavior and appearance.</p>
  </li>
  <li>
    <p><strong>Stay Calm</strong>: If a mistake occurs, we can always exit without saving changes. Use <code class="language-plaintext highlighter-rouge">^X</code> and choose not to save when prompted.</p>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Nano is an excellent choice for anyone looking for a beginner-friendly text editor. Its simple interface and intuitive shortcuts make it easy to use. By familiarizing with the essential shortcuts outlined in this post, we’ll be well on our way to mastering Nano.</p>

<p>Whether writing code, editing configuration files, or jotting down notes, Nano provides a straightforward way to get the job done. So, open the terminal, give Nano a try, and start editing with confidence!</p>]]></content><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><category term="nano" /><category term="shortcut" /><category term="editor" /><category term="text" /><summary type="html"><![CDATA[When it comes to text editing in the terminal, Nano stands out. It is user-friendly and simple. Nano’s straightforward interface makes it an excellent choice for anyone from novice to expert. In this blog post, we will explore essential Nano shortcuts. These will help you navigate and use this powerful text editor with ease.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://shivishbrahma.github.io/publog/public/images/0003_cover_en.webp" /><media:content medium="image" url="http://shivishbrahma.github.io/publog/public/images/0003_cover_en.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Custom WAMMP Setup in Windows (mod_wsgi support)</title><link href="http://shivishbrahma.github.io/publog/windows-wammp-setup/" rel="alternate" type="text/html" title="Custom WAMMP Setup in Windows (mod_wsgi support)" /><published>2023-04-30T17:25:06+00:00</published><updated>2023-04-30T17:25:06+00:00</updated><id>http://shivishbrahma.github.io/publog/windows-wammp-setup</id><content type="html" xml:base="http://shivishbrahma.github.io/publog/windows-wammp-setup/"><![CDATA[<p>Are you tired of using pre-packaged WAMPP solutions that limit your control and flexibility? Do you need to run Python web applications on Windows using the Apache web server? Look no further! This guide will walk you through the process of setting up a custom WAMPP environment on Windows, complete with mod_wsgi support for running Python web applications.</p>

<p>By following this guide, you’ll learn how to:</p>

<ul>
  <li>Install and configure Apache, MySQL, and PHP/Python on Windows</li>
  <li>Set up mod_wsgi to run Python web applications using Apache</li>
  <li>Configure your custom WAMPP environment to meet your specific needs</li>
  <li>Troubleshoot common issues and optimize performance</li>
</ul>

<p>Whether you’re a developer, system administrator, or simply looking for a more customizable WAMPP solution, this guide has got you covered. Let’s get started!</p>

<h2 id="php-installation">Php installation</h2>

<ul>
  <li>Download <code class="language-plaintext highlighter-rouge">php-8.1.*-Win32-vs16-x64.zip</code> file from <a href="https://windows.php.net/download#php-8.1">https://windows.php.net/download#php-8.1</a></li>
  <li>Unzip and rename the folder to <code class="language-plaintext highlighter-rouge">php81</code> and place it in <code class="language-plaintext highlighter-rouge">C:\Apps</code></li>
</ul>

<p>or</p>

<ul>
  <li>Set <code class="language-plaintext highlighter-rouge">ChocolateyToolsLocation</code> to <code class="language-plaintext highlighter-rouge">C:\Apps</code></li>
  <li>
    <p>Install php using choco</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>choco <span class="nb">install </span>php <span class="nt">--version</span><span class="o">=</span>8.1.22 <span class="nt">--package-parameters</span><span class="o">=</span><span class="s1">'"/ThreadSafe"'</span>
choco <span class="nb">install </span>php <span class="nt">--version</span><span class="o">=</span>8.2.15 <span class="nt">--package-parameters</span><span class="o">=</span><span class="s1">'"/ThreadSafe"'</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Set extension directory</p>

    <div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extension_dir = "ext"
</code></pre></div>    </div>
  </li>
  <li>Copy <code class="language-plaintext highlighter-rouge">C:\Apps\php81\php.ini-production</code> into <code class="language-plaintext highlighter-rouge">C:\Apps\php81\php.ini</code></li>
  <li>
    <p>Enable the extensions by commenting following lines</p>

    <div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extension=curl
extension=ftp
extension=fileinfo
extension=gd
extension=gettext
extension=mbstring
extension=exif      ; Must be after mbstring as it depends <span class="ss">on</span> it
extension=mysqli
extension=openssl
extension=pdo_mysql
extension=pdo_sqlite
extension=soap
extension=xsl
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="download-ca-certificate-and-replace-for-curl-config">Download ca certificate and replace for curl config</h3>

<ul>
  <li>Download the cacert.pem from <a href="https://curl.se/ca/cacert.pem">https://curl.se/ca/cacert.pem</a>.</li>
  <li>
    <p>Move it to <code class="language-plaintext highlighter-rouge">C:/Apps/php81/extras/ssl</code> and add uncomment the below line in <code class="language-plaintext highlighter-rouge">php.ini</code>.</p>

    <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">curl.cainfo</span> <span class="p">=</span> <span class="s">"C:</span><span class="se">\A</span><span class="s">pps</span><span class="se">\p</span><span class="s">hp81</span><span class="se">\e</span><span class="s">xtras</span><span class="se">\s</span><span class="s">sl</span><span class="se">\c</span><span class="s">acert.pem"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="apache-server-installation">Apache server installation</h2>

<ul>
  <li>Download <code class="language-plaintext highlighter-rouge">httpd-2.4.*-win64-VS17.zip</code> from <a href="https://www.apachelounge.com/download/">https://www.apachelounge.com/download/</a>.</li>
  <li>Unzip the above zip file and move <code class="language-plaintext highlighter-rouge">Apache24</code> to <code class="language-plaintext highlighter-rouge">C:\Apps\Apache24</code>.</li>
</ul>

<h3 id="go-to-directory-and-install-as-service">Go to directory and install as service</h3>

<ul>
  <li>Open the terminal in administrative mode and run the below commands</li>
</ul>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="kd">C</span>:\Apache24\bin\
<span class="kd">httpd</span> <span class="na">-k </span><span class="kd">install</span>
</code></pre></div></div>

<ul>
  <li>httpd server will be installed and <code class="language-plaintext highlighter-rouge">Apache2.4</code> should be available in Services.</li>
</ul>

<h3 id="configuring-in-httpd-server">Configuring in httpd server</h3>

<ul>
  <li>
    <p>Prepare a <code class="language-plaintext highlighter-rouge">httpd-php.conf</code> file with following content in <code class="language-plaintext highlighter-rouge">C:\Apps\Apache24\conf\extra</code></p>

    <div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#</span>
<span class="c"># PHP-Module setup</span>
<span class="c">#</span>

<span class="nc">LoadFile</span> "C:/Apps/php81/php8ts.dll"
<span class="nc">LoadFile</span> "C:/Apps/php81/libpq.dll"
<span class="nc">LoadFile</span> "C:/Apps/php81/libsqlite3.dll"
<span class="nc">LoadModule</span> php_module "C:/Apps/php81/php8apache2_4.dll"

<span class="p">&lt;</span><span class="nl">FilesMatch</span><span class="sr"> "\.php$"</span><span class="p">&gt;
</span>    <span class="nc">SetHandler</span> application/x-httpd-php
<span class="p">&lt;/</span><span class="nl">FilesMatch</span><span class="p">&gt;
&lt;</span><span class="nl">FilesMatch</span><span class="sr"> "\.phps$"</span><span class="p">&gt;
</span>    <span class="nc">SetHandler</span> application/x-httpd-php-source
<span class="p">&lt;/</span><span class="nl">FilesMatch</span><span class="p">&gt;
</span>
<span class="p">&lt;</span><span class="nl">IfModule</span><span class="sr"> php_module</span><span class="p">&gt;
</span>    PHPINIDir "C:/Apps/php8"
<span class="p">&lt;/</span><span class="nl">IfModule</span><span class="p">&gt;
</span>
<span class="p">&lt;</span><span class="nl">IfModule</span><span class="sr"> mime_module</span><span class="p">&gt;
</span>    <span class="nc">AddType</span> text/html .php .phps
<span class="p">&lt;/</span><span class="nl">IfModule</span><span class="p">&gt;
</span>
<span class="nc">ScriptAlias</span> /php-cgi/ "C:/Apps/php8/"
<span class="p">&lt;</span><span class="nl">Directory</span><span class="sr"> "C:/Apps/php8"</span><span class="p">&gt;
</span>    <span class="nc">AllowOverride</span> <span class="ss">None</span>
    <span class="nc">Options</span> <span class="ss">None</span>
    <span class="nc">Require</span> <span class="ss">all</span> denied
    <span class="p">&lt;</span><span class="nl">Files</span><span class="sr"> "php-cgi.exe"</span><span class="p">&gt;
</span>          <span class="nc">Require</span> <span class="ss">all</span> granted
    <span class="p">&lt;/</span><span class="nl">Files</span><span class="p">&gt;
&lt;/</span><span class="nl">Directory</span><span class="p">&gt;
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Include the above file in <code class="language-plaintext highlighter-rouge">C:\Apps\Apache24\conf\httpd.conf</code>.</p>

    <pre><code class="language-apacheconf">Include conf/extra/httpd-php.conf
</code></pre>
  </li>
</ul>

<h2 id="mysql-installation">MySQL installation</h2>

<ul>
  <li>
    <p>Download .msi file from <a href="https://dev.mysql.com/downloads/installer/">https://dev.mysql.com/downloads/installer/</a> and install</p>
  </li>
  <li>
    <p>Set the <code class="language-plaintext highlighter-rouge">root</code> password</p>
  </li>
</ul>

<h2 id="phpmyadmin">phpMyAdmin</h2>

<ul>
  <li>Download zip phpmyadmin - <a href="https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip">https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip</a></li>
  <li>Unzip and copy the <code class="language-plaintext highlighter-rouge">phpmyadmin</code> folder into <code class="language-plaintext highlighter-rouge">C:/Apache24/htdocs</code></li>
  <li>Create a phpmyadmin user <code class="language-plaintext highlighter-rouge">pma</code></li>
  <li>Edit config in <code class="language-plaintext highlighter-rouge">C:\Apache24\htdocs\phpmyadmin\config.inc.php</code> (Copy from <code class="language-plaintext highlighter-rouge">config.sample.inc.php</code>)</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Authentication type and info */</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'auth_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'config'</span><span class="p">;</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'user'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'root'</span><span class="p">;</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'password'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'&lt;mysql_password&gt;'</span><span class="p">;</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'extension'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'mysqli'</span><span class="p">;</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'AllowNoPassword'</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Lang'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'en'</span><span class="p">;</span>

<span class="cm">/* User for advanced features */</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'controluser'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'pma'</span><span class="p">;</span>
<span class="nv">$cfg</span><span class="p">[</span><span class="s1">'Servers'</span><span class="p">][</span><span class="nv">$i</span><span class="p">][</span><span class="s1">'controlpass'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'&lt;control_password&gt;'</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="adding-xdebug-for-code-coverage">Adding Xdebug for code coverage</h2>

<ul>
  <li>Download xdebug file from <a href="https://xdebug.org/files/php_xdebug-3.3.0alpha2-8.1-vs16-x86_64.dll">https://xdebug.org/files/php_xdebug-3.3.0alpha2-8.1-vs16-x86_64.dll</a></li>
  <li>Move it to <code class="language-plaintext highlighter-rouge">Apps\php81\ext</code> and rename it to <code class="language-plaintext highlighter-rouge">php_xdebug.dll</code>.</li>
  <li>Update <code class="language-plaintext highlighter-rouge">C:\Apps\php81\php.ini</code> and add the line:</li>
</ul>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zend_extension=xdebug
</code></pre></div></div>

<h2 id="configuring-virtual-hosts-and-symbolic-links">Configuring Virtual Hosts and Symbolic Links</h2>

<ul>
  <li>Create a symbolic directory from project directory</li>
</ul>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mklink</span> <span class="na">/D </span><span class="kd">C</span>:\Apache24\htdocs\diybaazar <span class="kd">C</span>:\Users\purch\Documents\Projects\Github\DIY<span class="na">-Baazar</span>\diybaazar<span class="na">-main

</span><span class="nb">mklink</span> <span class="na">/D </span><span class="kd">C</span>:\Apache24\htdocs\diybaazar<span class="na">-admin </span><span class="kd">C</span>:\Users\purch\Documents\Projects\Github\DIY<span class="na">-Baazar</span>\diybaazar<span class="na">-admin

</span><span class="nb">mklink</span> <span class="na">/D </span><span class="kd">C</span>:\Apache24\htdocs\diybdocs <span class="kd">C</span>:\Users\purch\Documents\Projects\Github\DIY<span class="na">-Baazar</span>\diybaazar<span class="na">-docs
</span></code></pre></div></div>

<ul>
  <li>Add virtual host config in <code class="language-plaintext highlighter-rouge">httpd-vhosts.conf</code></li>
</ul>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nl">VirtualHost</span><span class="sr"> *:80</span><span class="p">&gt;
</span>    <span class="nc">ServerAdmin</span> webmaster@localhost
<span class="p">&lt;/</span><span class="nl">VirtualHost</span><span class="p">&gt;
</span>
<span class="p">&lt;</span><span class="nl">VirtualHost</span><span class="sr"> *:80</span><span class="p">&gt;
</span>    <span class="nc">ServerAdmin</span> webmaster@diybaazar.xyz
    <span class="nc">DocumentRoot</span> "${SRVROOT}/htdocs/diybaazar"
    <span class="nc">ServerName</span> diybaazar.xyz
    <span class="nc">ErrorLog</span> "logs/diybaazar.xyz-error.log"
    <span class="nc">CustomLog</span> "logs/diybaazar.xyz-access.log" common
<span class="p">&lt;/</span><span class="nl">VirtualHost</span><span class="p">&gt;
</span></code></pre></div></div>

<h2 id="hosting-flask-service">Hosting Flask Service</h2>

<ul>
  <li>Installing mod-wsgi</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> pip <span class="nb">install </span>mod-wsgi
</code></pre></div></div>

<ul>
  <li>Run the following the command and copy the output</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mod_wsgi-express module-config
</code></pre></div></div>

<p>Output will look something like this:</p>

<pre><code class="language-txt">LoadFile "C:/Python311/python311.dll"
LoadModule wsgi_module "C:/Python311/Lib/site-packages/mod_wsgi/server/mod_wsgi.cp311-win_amd64.pyd"
WSGIPythonHome "C:/Python311"
</code></pre>

<ul>
  <li>
    <p>Paste it in <code class="language-plaintext highlighter-rouge">httpd.conf</code>.</p>
  </li>
  <li>
    <p>Add the following config in <code class="language-plaintext highlighter-rouge">httpd-vhosts.conf</code>.</p>
  </li>
</ul>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nl">VirtualHost</span><span class="sr"> *:80</span><span class="p">&gt;
</span>    <span class="nc">DocumentRoot</span> "${SRVROOT}/htdocs/diybdocs"
    <span class="nc">ServerAdmin</span> webmaster@diybaazar.xyz
    <span class="nc">ServerName</span> docs.diybaazar.xyz

    WSGIScriptAlias / "${SRVROOT}/htdocs/diybdocs/app.wsgi"
    <span class="p">&lt;</span><span class="nl">Directory</span><span class="sr"> "${SRVROOT}/htdocs/diybdocs"</span><span class="p">&gt;
</span>        WSGIApplicationGroup %{GLOBAL}
        WSGIScriptReloading <span class="ss">On</span>
        <span class="nc">allow</span> <span class="ss">from</span> <span class="ss">all</span>
        <span class="c">#Options None</span>
        <span class="nc">AllowOverride</span> <span class="ss">All</span>
        <span class="nc">Require</span> <span class="ss">all</span> granted
    <span class="p">&lt;/</span><span class="nl">Directory</span><span class="p">&gt;
</span>
    <span class="nc">ErrorLog</span> "logs/docs.diybaazar.xyz-error.log"
    <span class="nc">CustomLog</span> "logs/docs.diybaazar.xyz-access.log" common
<span class="p">&lt;/</span><span class="nl">VirtualHost</span><span class="p">&gt;
</span></code></pre></div></div>]]></content><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><category term="windows" /><category term="apache" /><category term="php" /><summary type="html"><![CDATA[Are you tired of using pre-packaged WAMPP solutions that limit your control and flexibility? Do you need to run Python web applications on Windows using the Apache web server? Look no further! This guide will walk you through the process of setting up a custom WAMPP environment on Windows, complete with mod_wsgi support for running Python web applications.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://shivishbrahma.github.io/publog/public/images/0002_cover_en.webp" /><media:content medium="image" url="http://shivishbrahma.github.io/publog/public/images/0002_cover_en.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction To Ruby</title><link href="http://shivishbrahma.github.io/publog/introduction-to-ruby/" rel="alternate" type="text/html" title="Introduction To Ruby" /><published>2022-04-01T10:43:06+00:00</published><updated>2022-04-01T10:43:06+00:00</updated><id>http://shivishbrahma.github.io/publog/introduction-to-ruby</id><content type="html" xml:base="http://shivishbrahma.github.io/publog/introduction-to-ruby/"><![CDATA[<p>Welcome to the world of Ruby, a dynamic and versatile programming language that’s been delighting developers and powering innovative applications for over two decades. Known for its simplicity, readability, and ease of use, Ruby has become a favorite among beginners and experienced programmers alike.</p>

<p>In this introduction to Ruby, we’ll take you on a journey through the basics of the language, covering its syntax, features, and ecosystem. You’ll learn how to write Ruby code, work with data structures, and create reusable functions. Whether you’re new to programming or looking to add Ruby to your skillset, this guide will provide a solid foundation for further exploration.</p>

<p>By the end of this introduction, you’ll understand why Ruby is a popular choice for web development, scripting, and system administration, and be ready to start building your own Ruby projects. So let’s get started and uncover the joy of programming with Ruby!</p>

<h2 id="numbers--chapter-1">Numbers : Chapter 1</h2>

<p>Ruby Hello World Program</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"Hello World"</span>
</code></pre></div></div>

<p>Save and run the file.
<code class="language-plaintext highlighter-rouge">ruby calc.rb</code></p>

<h3 id="introduction-to-puts">Introduction to puts</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">1</span><span class="o">+</span><span class="mi">2</span>
</code></pre></div></div>

<p>puts simply writes onto the screen whatever comes after it.</p>

<h3 id="integer-and-float">Integer and Float</h3>

<p>Numbers without decimal points are called <em>integers</em>, and numbers with decimal points are called <em>floating-point numbers</em>.</p>

<p>Here are some integers:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span>
<span class="o">-</span><span class="mi">205</span>
<span class="mi">9999999999999999999999999</span>
<span class="mi">0</span>
</code></pre></div></div>

<p>Here are some floats:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">54.321</span>
<span class="mf">0.001</span>
<span class="o">-</span><span class="mf">205.3884</span>
<span class="mf">0.0</span>
</code></pre></div></div>

<h3 id="simple-arithmetic">Simple Arithmetic</h3>

<p>Let’s do some simple arithmetic:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mf">1.0</span> <span class="o">+</span> <span class="mf">2.0</span>
<span class="nb">puts</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="mf">3.0</span>
<span class="nb">puts</span> <span class="mf">5.0</span> <span class="o">-</span> <span class="mf">8.0</span>
<span class="nb">puts</span> <span class="mf">9.0</span> <span class="o">/</span> <span class="mf">2.0</span>
</code></pre></div></div>

<p>Program result:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.0
6.0
-3.0
4.5
</code></pre></div></div>

<p>Let’s try it with integers:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">1</span><span class="o">+</span><span class="mi">2</span>
<span class="nb">puts</span> <span class="mi">2</span><span class="o">*</span><span class="mi">3</span>
<span class="nb">puts</span> <span class="mi">5</span><span class="o">-</span><span class="mi">8</span>
<span class="nb">puts</span> <span class="mi">9</span><span class="o">/</span><span class="mi">2</span>
</code></pre></div></div>

<p>Program result:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
6
-3
4
</code></pre></div></div>

<p>Complex arithmetic expressions can be written using the following operators:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">5</span> <span class="o">*</span> <span class="p">(</span><span class="mi">12</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="o">-</span><span class="mi">15</span>
<span class="nb">puts</span> <span class="mi">98</span> <span class="o">+</span> <span class="p">(</span><span class="mi">59872</span> <span class="o">/</span> <span class="p">(</span><span class="mi">13</span><span class="o">*</span><span class="mi">8</span><span class="p">))</span> <span class="o">*</span> <span class="o">-</span><span class="mi">52</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
-29802
</code></pre></div></div>

<h2 id="letters--chapter-2">Letters : Chapter 2</h2>

<p>Some strings are:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'Hello.'</span>
<span class="s1">'Ruby rocks.'</span>
<span class="s1">'5 is my favorite number... what is yours?'</span>
<span class="s1">'Snoopy says #%^?&amp;*@! when he stubs his toe.'</span>
<span class="s1">'     '</span>
<span class="s1">''</span>
</code></pre></div></div>

<p>Strings can have punctuation, digits, symbols, and spaces in them… more than just letters.</p>

<p>Let’s try it with some strings:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, world!'</span>
<span class="nb">puts</span> <span class="s1">''</span>
<span class="nb">puts</span> <span class="s1">'Good-bye.'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, world!

Good-bye.
</code></pre></div></div>

<h3 id="string-arithmetic">String Arithmetic</h3>

<p>Adding or concatenating strings is easy:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'I like'</span> <span class="o">+</span> <span class="s1">'apple pie.'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I likeapple pie.
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'I like '</span> <span class="o">+</span> <span class="s1">'apple pie.'</span>
<span class="nb">puts</span> <span class="s1">'I like'</span> <span class="o">+</span> <span class="s1">' apple pie.'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I like apple pie.
I like apple pie.
</code></pre></div></div>

<p>We can multiply them</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'blink '</span> <span class="o">*</span> <span class="mi">4</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blink blink blink blink
</code></pre></div></div>

<h3 id="12-vs-12">12 vs ‘12’</h3>

<p>12 is a number, but ‘12’ is a string of two digits.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span>  <span class="mi">12</span>  <span class="o">+</span>  <span class="mi">12</span>
<span class="nb">puts</span> <span class="s1">'12'</span> <span class="o">+</span> <span class="s1">'12'</span>
<span class="nb">puts</span> <span class="s1">'12  +  12'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>24
1212
12  +  12
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span>  <span class="mi">2</span>  <span class="o">*</span>  <span class="mi">5</span>
<span class="nb">puts</span> <span class="s1">'2'</span> <span class="o">*</span>  <span class="mi">5</span>
<span class="nb">puts</span> <span class="s1">'2  *  5'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10
22222
2  *  5
</code></pre></div></div>

<h3 id="problems">Problems</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'12'</span> <span class="o">+</span> <span class="mi">12</span>
<span class="nb">puts</span> <span class="s1">'2'</span> <span class="o">*</span> <span class="s1">'5'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#&lt;TypeError: no implicit conversion of Integer into String&gt;
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'You'</span><span class="n">re</span> <span class="n">swell!</span><span class="err">'</span>
</code></pre></div></div>

<p>The computer thought we were done with the string. (This is why it’s nice to have a text editor which does syntax coloring for you.)</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'You\'re swell!'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You're swell!
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'You\'re swell!'</span>
<span class="nb">puts</span> <span class="s1">'backslash at the end of a string:  \\'</span>
<span class="nb">puts</span> <span class="s1">'up\\down'</span>
<span class="nb">puts</span> <span class="s1">'up\down'</span>
</code></pre></div></div>

<p>The backslash is the escape character. In other words, if you have a backslash and another character, they are sometimes translated into a new character.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You're swell!
backslash at the end of a string:  \
up\down
up\down
</code></pre></div></div>

<h2 id="variables-and-assignment--chapter-3">Variables and Assignment : Chapter 3</h2>

<p>We wanted to print something out twice, we would have to type it in twice:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'...you can say that again...'</span>
<span class="nb">puts</span> <span class="s1">'...you can say that again...'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...you can say that again...
...you can say that again...
</code></pre></div></div>

<p>Assigning a value to a variable is called <em>assignment</em>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">myString</span> <span class="o">=</span> <span class="s1">'...you can say that again...'</span>
<span class="nb">puts</span> <span class="n">myString</span>
<span class="nb">puts</span> <span class="n">myString</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...you can say that again...
...you can say that again...
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">name</span> <span class="o">=</span> <span class="s1">'Patricia Rosanna Jessica Mildred Oppenheimer'</span>
<span class="nb">puts</span> <span class="s1">'My name is '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.'</span>
<span class="nb">puts</span> <span class="s1">'Wow!  '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">' is a really long name!'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My name is Patricia Rosanna Jessica Mildred Oppenheimer.
Wow!  Patricia Rosanna Jessica Mildred Oppenheimer is a really long name!
</code></pre></div></div>

<p>We can assign an object to a variable, we can reassign a different object to that variable.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">composer</span> <span class="o">=</span> <span class="s1">'Mozart'</span>
<span class="nb">puts</span> <span class="n">composer</span> <span class="o">+</span> <span class="s1">' was "da bomb", in his day.'</span>

<span class="n">composer</span> <span class="o">=</span> <span class="s1">'Beethoven'</span>
<span class="nb">puts</span> <span class="s1">'But I prefer '</span> <span class="o">+</span> <span class="n">composer</span> <span class="o">+</span> <span class="s1">', personally.'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mozart was "da bomb", in his day.
But I prefer Beethoven, personally.
</code></pre></div></div>

<p>Variables can point to any kind of object, not just strings:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var</span> <span class="o">=</span> <span class="s1">'just another '</span> <span class="o">+</span> <span class="s1">'string'</span>
<span class="nb">puts</span> <span class="n">var</span>

<span class="n">var</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">var</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>just another string
15
</code></pre></div></div>

<p>Variables can point to just about anything… except other variables.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var1</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">var2</span> <span class="o">=</span> <span class="n">var1</span>
<span class="nb">puts</span> <span class="n">var1</span>
<span class="nb">puts</span> <span class="n">var2</span>

<span class="nb">puts</span> <span class="s1">''</span>

<span class="n">var1</span> <span class="o">=</span> <span class="s1">'eight'</span>
<span class="nb">puts</span> <span class="n">var1</span>
<span class="nb">puts</span> <span class="n">var2</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>8
8

eight
8
</code></pre></div></div>

<h2 id="mixing-it-all-up--chapter-4">Mixing it all up : Chapter 4</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var1</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">var2</span> <span class="o">=</span> <span class="s1">'5'</span>

<span class="nb">puts</span> <span class="n">var1</span> <span class="o">+</span> <span class="n">var2</span>
</code></pre></div></div>

<p>If you were trying to get 7 (2 + 5), or if you wanted to get 25 (‘2’ + ‘5’).</p>

<h3 id="conversions">Conversions</h3>

<p>To get the string version of an object, we simply write .<code class="language-plaintext highlighter-rouge">to_s</code> after it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var1</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">var2</span> <span class="o">=</span> <span class="s1">'5'</span>

<span class="nb">puts</span> <span class="n">var1</span><span class="p">.</span><span class="nf">to_s</span> <span class="o">+</span> <span class="n">var2</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>25
</code></pre></div></div>

<p>Similarly, <code class="language-plaintext highlighter-rouge">to_i</code> gives the integer version of an object, and <code class="language-plaintext highlighter-rouge">to_f</code> gives the float version.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var1</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">var2</span> <span class="o">=</span> <span class="s1">'5'</span>

<span class="nb">puts</span> <span class="n">var1</span><span class="p">.</span><span class="nf">to_s</span> <span class="o">+</span> <span class="n">var2</span>
<span class="nb">puts</span> <span class="n">var1</span> <span class="o">+</span> <span class="n">var2</span><span class="p">.</span><span class="nf">to_i</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>25
7
</code></pre></div></div>

<p>Other conversions:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'15'</span><span class="p">.</span><span class="nf">to_f</span>
<span class="nb">puts</span> <span class="s1">'99.999'</span><span class="p">.</span><span class="nf">to_f</span>
<span class="nb">puts</span> <span class="s1">'99.999'</span><span class="p">.</span><span class="nf">to_i</span>
<span class="nb">puts</span> <span class="s1">''</span>
<span class="nb">puts</span> <span class="s1">'5 is my favorite number!'</span><span class="p">.</span><span class="nf">to_i</span>
<span class="nb">puts</span> <span class="s1">'Who asked you about 5 or whatever?'</span><span class="p">.</span><span class="nf">to_i</span>
<span class="nb">puts</span> <span class="s1">'Your momma did.'</span><span class="p">.</span><span class="nf">to_f</span>
<span class="nb">puts</span> <span class="s1">''</span>
<span class="nb">puts</span> <span class="s1">'stringy'</span><span class="p">.</span><span class="nf">to_s</span>
<span class="nb">puts</span> <span class="mi">3</span><span class="p">.</span><span class="nf">to_i</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>15.0
99.999
99

5
0
0.0

stringy
3
</code></pre></div></div>

<p>The first one is pretty standard, giving 15.0. After that, we converted the string ‘99.999’ to a float and to an integer.</p>

<h3 id="another-look-at-puts">Another Look at puts</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">20</span>
<span class="nb">puts</span> <span class="mi">20</span><span class="p">.</span><span class="nf">to_s</span>
<span class="nb">puts</span> <span class="s1">'20'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20
20
20
</code></pre></div></div>

<p>Before puts tries to write out an object, it uses to_s to get the string version of that object. In fact, the s in puts stands for string; puts really means put string.</p>

<h3 id="the-methods-gets-and-chomp">The Methods gets and chomp</h3>

<p>Since our keyboard only makes strings, that works out beautifully. What actually happens is that gets just sits there, reading what we type until we press Enter.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="nb">gets</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Is there an echo in here?
Is there an echo in here?
</code></pre></div></div>

<p>In this one, type in your name and it will greet you:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello there, and what\'s your name?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span>
<span class="nb">puts</span> <span class="s1">'Your name is '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'?  What a lovely name!'</span>
<span class="nb">puts</span> <span class="s1">'Pleased to meet you, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.  :)'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello there, and what's your name?
Chris
Your name is Chris
?  What a lovely name!
Pleased to meet you, Chris
.  :)
</code></pre></div></div>

<p>When I typed in the letters C, h, r, i, s, and then pressed Enter, gets got all of the letters in my name and the Enter! Let’s try that program again, but with chomp to help us this time:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello there, and what\'s your name?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="nb">puts</span> <span class="s1">'Your name is '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'?  What a lovely name!'</span>
<span class="nb">puts</span> <span class="s1">'Pleased to meet you, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.  :)'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello there, and what's your name?
Chris
Your name is Chris?  What a lovely name!
Pleased to meet you, Chris.  :)
</code></pre></div></div>

<h2 id="more-about-methods--chapter-5">More About Methods : Chapter 5</h2>

<p>As it turns out, 5 + 5 is really just a shortcut way of writing 5.+ 5.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'hello '</span><span class="p">.</span><span class="nf">+</span> <span class="s1">'world'</span>
<span class="nb">puts</span> <span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="nf">*</span> <span class="mi">9</span><span class="p">).</span><span class="nf">+</span> <span class="mi">9</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello world
99
</code></pre></div></div>

<p>On older versions of Ruby, this code might also give a warning: warning: parenthesize argument(s) for future version. It would still run the code just fine, though.</p>

<p>So what is self? It’s a special variable which points to whatever object you are in.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iCantBelieveIMadeAVariableNameThisLongJustToPointToA3</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="n">iCantBelieveIMadeAVariableNameThisLongJustToPointToA3</span>
<span class="nb">self</span><span class="p">.</span><span class="nf">puts</span> <span class="n">iCantBelieveIMadeAVariableNameThisLongJustToPointToA3</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
3
</code></pre></div></div>

<h3 id="fancy-string-methods">Fancy String Methods</h3>

<p>So, our first string method is reverse, which gives a backwards version of a string:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var1</span> <span class="o">=</span> <span class="s1">'stop'</span>
<span class="n">var2</span> <span class="o">=</span> <span class="s1">'stressed'</span>
<span class="n">var3</span> <span class="o">=</span> <span class="s1">'Can you pronounce this sentence backwards?'</span>

<span class="nb">puts</span> <span class="n">var1</span><span class="p">.</span><span class="nf">reverse</span>
<span class="nb">puts</span> <span class="n">var2</span><span class="p">.</span><span class="nf">reverse</span>
<span class="nb">puts</span> <span class="n">var3</span><span class="p">.</span><span class="nf">reverse</span>
<span class="nb">puts</span> <span class="n">var1</span>
<span class="nb">puts</span> <span class="n">var2</span>
<span class="nb">puts</span> <span class="n">var3</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pots
desserts
?sdrawkcab ecnetnes siht ecnuonorp uoy naC
stop
stressed
Can you pronounce this sentence backwards?
</code></pre></div></div>

<p>Another string method is length, which tells us the number of characters (including spaces) in the string:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'What is your full name?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="nb">puts</span> <span class="s1">'Did you know there are '</span> <span class="o">+</span> <span class="nb">name</span><span class="p">.</span><span class="nf">length</span> <span class="o">+</span>
     <span class="s1">' characters in your name, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'?'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>What is your full name?
Christopher David Pine
#&lt;TypeError: no implicit conversion of Integer into String&gt;
</code></pre></div></div>

<p>swapcase switches the case of every letter in the string, and finally, capitalize is just like downcase, except that it switches the first character to uppercase (if it is a letter).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">letters</span> <span class="o">=</span> <span class="s1">'aAbBcCdDeE'</span>
<span class="nb">puts</span> <span class="n">letters</span><span class="p">.</span><span class="nf">upcase</span>
<span class="nb">puts</span> <span class="n">letters</span><span class="p">.</span><span class="nf">downcase</span>
<span class="nb">puts</span> <span class="n">letters</span><span class="p">.</span><span class="nf">swapcase</span>
<span class="nb">puts</span> <span class="n">letters</span><span class="p">.</span><span class="nf">capitalize</span>
<span class="nb">puts</span> <span class="s1">' a'</span><span class="p">.</span><span class="nf">capitalize</span>
<span class="nb">puts</span> <span class="n">letters</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AABBCCDDEE
aabbccddee
AaBbCcDdEe
Aabbccddee
 a
aAbBcCdDeE
</code></pre></div></div>

<p>So if I wanted to center the lines of a poem, I would do it like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">50</span>
<span class="nb">puts</span><span class="p">(</span>                <span class="s1">'Old Mother Hubbard'</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span>               <span class="s1">'Sat in her cupboard'</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span>         <span class="s1">'Eating her curds an whey,'</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span>          <span class="s1">'When along came a spider'</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span>         <span class="s1">'Which sat down beside her'</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="s1">'And scared her poor shoe dog away.'</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                Old Mother Hubbard
               Sat in her cupboard
            Eating her curds an whey,
             When along came a spider
            Which sat down beside her
        And scared her poor shoe dog away.
</code></pre></div></div>

<p>The other two string formatting methods are ljust and rjust, which stand for left justify and right justify. They are similar to center, except that they pad the string with spaces on the right and left sides, respectively.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">40</span>
<span class="n">str</span> <span class="o">=</span> <span class="s1">'--&gt; text &lt;--'</span>
<span class="nb">puts</span> <span class="n">str</span><span class="p">.</span><span class="nf">ljust</span>  <span class="n">lineWidth</span>
<span class="nb">puts</span> <span class="n">str</span><span class="p">.</span><span class="nf">center</span> <span class="n">lineWidth</span>
<span class="nb">puts</span> <span class="n">str</span><span class="p">.</span><span class="nf">rjust</span>  <span class="n">lineWidth</span>
<span class="nb">puts</span> <span class="n">str</span><span class="p">.</span><span class="nf">ljust</span><span class="p">(</span><span class="n">lineWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">str</span><span class="p">.</span><span class="nf">rjust</span><span class="p">(</span><span class="n">lineWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--&gt; text &lt;--
              --&gt; text &lt;--
                            --&gt; text &lt;--
--&gt; text &lt;--                --&gt; text &lt;--
</code></pre></div></div>

<h4 id="problems---5">Problems - 5</h4>

<ul>
  <li>
    <p>Write an Angry Boss program. It should rudely ask what you want. Whatever you answer, the Angry Boss should yell it back to you, and then fire you. For example, if you type in <code class="language-plaintext highlighter-rouge">I want a raise.</code>, it should yell back <code class="language-plaintext highlighter-rouge">WHADDAYA MEAN "I WANT A RAISE."?!? YOU'RE FIRED!!</code></p>
  </li>
  <li>
    <p>So here’s something for you to do in order to play around more with center, ljust, and rjust: Write a program which will display a Table of Contents so that it looks like this:</p>
  </li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    Table of Contents

    Chapter 1:  Numbers                        page 1
    Chapter 2:  Letters                       page 72
    Chapter 3:  Variables                    page 118
</code></pre></div></div>

<h3 id="higher-math">Higher Math</h3>

<p>We’ll look at the rest of the arithmetic methods, a random number generator, and the Math object, with its trigonometric and transcendental methods.</p>

<p>The other two arithmetic methods are ** (exponentiation) and % (modulus).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">5</span><span class="o">**</span><span class="mi">2</span>
<span class="nb">puts</span> <span class="mi">5</span><span class="o">**</span><span class="mf">0.5</span>
<span class="nb">puts</span> <span class="mi">7</span><span class="o">/</span><span class="mi">3</span>
<span class="nb">puts</span> <span class="mi">7</span><span class="o">%</span><span class="mi">3</span>
<span class="nb">puts</span> <span class="mi">365</span><span class="o">%</span><span class="mi">7</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>25
2.23606797749979
2
1
1
</code></pre></div></div>

<p>It just takes the absolute value of the number:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span><span class="p">((</span><span class="mi">5</span><span class="o">-</span><span class="mi">2</span><span class="p">).</span><span class="nf">abs</span><span class="p">)</span>
<span class="nb">puts</span><span class="p">((</span><span class="mi">2</span><span class="o">-</span><span class="mi">5</span><span class="p">).</span><span class="nf">abs</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
3
</code></pre></div></div>

<h3 id="random-numbers">Random Numbers</h3>

<p>If we call rand just like that, we’ll get a float greater than or equal to 0.0 and less than 1.0. If we give rand an integer (5 for example), it will give we an integer greater than or equal to 0 and less than 5 (so five possible numbers, from 0 to 4).</p>

<p>Let’s see rand in action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="nb">rand</span>
<span class="nb">puts</span> <span class="nb">rand</span>
<span class="nb">puts</span> <span class="nb">rand</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">99999999999999999999999999999999999999999999999999999999999</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="s1">'The weatherman said there is a '</span><span class="o">+</span><span class="nb">rand</span><span class="p">(</span><span class="mi">101</span><span class="p">).</span><span class="nf">to_s</span><span class="o">+</span><span class="s1">'% chance of rain,'</span><span class="p">)</span>
<span class="nb">puts</span><span class="p">(</span><span class="s1">'but you can never trust a weatherman.'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.17429261270690644
0.6038796470847551
0.5357456897902644
82
63
21
0
0
0
93717128025224525218060865578711367433735357080012377789690
The weatherman said there is a 9% chance of rain,
but you can never trust a weatherman.
</code></pre></div></div>

<p>In order to do this, you need to set the seed, which you can do with srand. Like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">srand</span> <span class="mi">1776</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span> <span class="s1">''</span>
<span class="nb">srand</span> <span class="mi">1776</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>24
35
36
58
70

24
35
36
58
70
</code></pre></div></div>

<h3 id="the-math-object">The Math Object</h3>

<p>Finally, let’s look at the Math object. We might as well jump right in:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">PI</span><span class="p">)</span>
<span class="nb">puts</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">E</span><span class="p">)</span>
<span class="nb">puts</span><span class="p">(</span><span class="no">Math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">PI</span><span class="o">/</span><span class="mi">3</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="no">Math</span><span class="p">.</span><span class="nf">tan</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">PI</span><span class="o">/</span><span class="mi">4</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">(</span><span class="no">Math</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">E</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
<span class="nb">puts</span><span class="p">((</span><span class="mi">1</span> <span class="o">+</span> <span class="no">Math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.141592653589793
2.718281828459045
0.5000000000000001
0.9999999999999999
2.0
1.618033988749895
</code></pre></div></div>

<h2 id="flow-control--chapter-6">Flow Control : Chapter 6</h2>

<h3 id="comparison-methods">Comparison Methods</h3>

<p>So, to see if one object is greater than or less than another, we use the methods &gt; and &lt;, like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span>
<span class="nb">puts</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>false
true
</code></pre></div></div>

<p>Likewise, we can find out if an object is greater-than-or-equal-to another (or less-than-or-equal-to) with the methods &gt;= and &lt;=</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">5</span> <span class="o">&gt;=</span> <span class="mi">5</span>
<span class="nb">puts</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="mi">4</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>true
false
</code></pre></div></div>

<p>It’s important not to confuse = with ==. = is for telling a variable to point at an object (assignment), and == is for asking the question: “Are these two objects equal?”</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
<span class="nb">puts</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>true
true
</code></pre></div></div>

<p>When strings get compared, they compare their lexicographical ordering, which basically means their dictionary ordering. cat comes before dog in the dictionary, so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'cat'</span> <span class="o">&lt;</span> <span class="s1">'dog'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>true
</code></pre></div></div>

<p>One last note before Branching: The comparison methods aren’t giving us the strings ‘true’ and ‘false’; they are giving us the special objects true and false.</p>

<h3 id="branching">Branching</h3>

<p>Branching is a simple concept, but powerful.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, what\'s your name?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="nb">puts</span> <span class="s1">'Hello, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.'</span>
<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">'Chris'</span>
  <span class="nb">puts</span> <span class="s1">'What a lovely name!'</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, what's your name?
Chris
Hello, Chris.
What a lovely name!
</code></pre></div></div>

<p>We put in a different name</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, what's your name?
Chewbacca
Hello, Chewbacca.
</code></pre></div></div>

<p>If what comes after the if is true, we run the code between the if and the end. If what comes after the if is false, we don’t.</p>

<p>Often, we would like a program to do one thing if an expression is true, and another if it is false. That’s what else is for:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'I am a fortune-teller.  Tell me your name:'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">'Chris'</span>
  <span class="nb">puts</span> <span class="s1">'I see great things in your future.'</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s1">'Your future is... Oh my!  Look at the time!'</span>
  <span class="nb">puts</span> <span class="s1">'I really have to go, sorry!'</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I am a fortune-teller.  Tell me your name:
Chris
I see great things in your future.
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I am a fortune-teller.  Tell me your name:
Ringo
Your future is... Oh my!  Look at the time!
I really have to go, sorry!
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, and welcome to 7th grade English.'</span>
<span class="nb">puts</span> <span class="s1">'My name is Mrs. Gabbard.  And your name is...?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="nb">name</span><span class="p">.</span><span class="nf">capitalize</span>
  <span class="nb">puts</span> <span class="s1">'Please take a seat, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.'</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'?  You mean '</span> <span class="o">+</span> <span class="nb">name</span><span class="p">.</span><span class="nf">capitalize</span> <span class="o">+</span> <span class="s1">', right?'</span>
  <span class="nb">puts</span> <span class="s1">'Don\'t you even know how to spell your name??'</span>
  <span class="n">reply</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

  <span class="k">if</span> <span class="n">reply</span><span class="p">.</span><span class="nf">downcase</span> <span class="o">==</span> <span class="s1">'yes'</span>
    <span class="nb">puts</span> <span class="s1">'Hmmph!  Well, sit down!'</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s1">'GET OUT!!'</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, and welcome to 7th grade English.
My name is Mrs. Gabbard.  And your name is...?
chris
chris?  You mean Chris, right?
Don't you even know how to spell your name??
yes
Hmmph!  Well, sit down!
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, and welcome to 7th grade English.
My name is Mrs. Gabbard.  And your name is...?
Chris
Please take a seat, Chris.
</code></pre></div></div>

<p>Sometimes it might get confusing trying to figure out where all of the ifs, elses, and ends go.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, and welcome to 7th grade English.'</span>
<span class="nb">puts</span> <span class="s1">'My name is Mrs. Gabbard.  And your name is...?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="nb">name</span><span class="p">.</span><span class="nf">capitalize</span>
<span class="k">else</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, and welcome to 7th grade English.'</span>
<span class="nb">puts</span> <span class="s1">'My name is Mrs. Gabbard.  And your name is...?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="nb">name</span><span class="p">.</span><span class="nf">capitalize</span>
  <span class="c1"># She's civil.</span>
<span class="k">else</span>
  <span class="c1"># She gets mad.</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, and welcome to 7th grade English.'</span>
<span class="nb">puts</span> <span class="s1">'My name is Mrs. Gabbard.  And your name is...?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="nb">name</span><span class="p">.</span><span class="nf">capitalize</span>
  <span class="nb">puts</span> <span class="s1">'Please take a seat, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.'</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'?  You mean '</span> <span class="o">+</span> <span class="nb">name</span><span class="p">.</span><span class="nf">capitalize</span> <span class="o">+</span> <span class="s1">', right?'</span>
  <span class="nb">puts</span> <span class="s1">'Don\'t you even know how to spell your name??'</span>
  <span class="n">reply</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

  <span class="k">if</span> <span class="n">reply</span><span class="p">.</span><span class="nf">downcase</span> <span class="o">==</span> <span class="s1">'yes'</span>
  <span class="k">else</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="looping">Looping</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">command</span> <span class="o">=</span> <span class="s1">''</span>

<span class="k">while</span> <span class="n">command</span> <span class="o">!=</span> <span class="s1">'bye'</span>
  <span class="nb">puts</span> <span class="n">command</span>
  <span class="n">command</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s1">'Come again soon!'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello?
Hello?
Hi!
Hi!
Very nice to meet you.
Very nice to meet you.
Oh... how sweet!
Oh... how sweet!
bye
Come again soon!
</code></pre></div></div>

<h3 id="a-little-bit-of-logic">A Little Bit of Logic</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, what\'s your name?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="nb">puts</span> <span class="s1">'Hello, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.'</span>
<span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">'Chris'</span>
  <span class="nb">puts</span> <span class="s1">'What a lovely name!'</span>
<span class="k">else</span>
  <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">'Katy'</span>
    <span class="nb">puts</span> <span class="s1">'What a lovely name!'</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, what's your name?
Katy
Hello, Katy.
What a lovely name!
</code></pre></div></div>

<p>The DRY rule is Don’t Repeat Yourself</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, what\'s your name?'</span>
<span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
<span class="nb">puts</span> <span class="s1">'Hello, '</span> <span class="o">+</span> <span class="nb">name</span> <span class="o">+</span> <span class="s1">'.'</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">name</span> <span class="o">==</span> <span class="s1">'Chris'</span> <span class="ow">or</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">'Katy'</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s1">'What a lovely name!'</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, what's your name?
Katy
Hello, Katy.
What a lovely name!
</code></pre></div></div>

<p>The other logical operators are and and not.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iAmChris</span>  <span class="o">=</span> <span class="kp">true</span>
<span class="n">iAmPurple</span> <span class="o">=</span> <span class="kp">false</span>
<span class="n">iLikeFood</span> <span class="o">=</span> <span class="kp">true</span>
<span class="n">iEatRocks</span> <span class="o">=</span> <span class="kp">false</span>

<span class="nb">puts</span> <span class="p">(</span><span class="n">iAmChris</span>  <span class="ow">and</span> <span class="n">iLikeFood</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iLikeFood</span> <span class="ow">and</span> <span class="n">iEatRocks</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iAmPurple</span> <span class="ow">and</span> <span class="n">iLikeFood</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iAmPurple</span> <span class="ow">and</span> <span class="n">iEatRocks</span><span class="p">)</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iAmChris</span>  <span class="ow">or</span> <span class="n">iLikeFood</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iLikeFood</span> <span class="ow">or</span> <span class="n">iEatRocks</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iAmPurple</span> <span class="ow">or</span> <span class="n">iLikeFood</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="n">iAmPurple</span> <span class="ow">or</span> <span class="n">iEatRocks</span><span class="p">)</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="p">(</span><span class="ow">not</span> <span class="n">iAmPurple</span><span class="p">)</span>
<span class="nb">puts</span> <span class="p">(</span><span class="ow">not</span> <span class="n">iAmChris</span> <span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>true
false
false
false

true
true
true
false

true
false
</code></pre></div></div>

<h3 id="a-few-things-to-try--chapter-6">A Few Things to Try : Chapter 6</h3>

<ul>
  <li>
    <p>“99 bottles of beer on the wall…” Write a program which prints out the lyrics to that beloved classic, that field-trip favorite: “99 Bottles of Beer on the Wall.”</p>
  </li>
  <li>
    <p>Write a Deaf Grandma program. Whatever you say to grandma (whatever you type in), she should respond with HUH?! SPEAK UP, SONNY!, unless you shout it (type in all capitals). If you shout, she can hear you (or at least she thinks so) and yells back, NO, NOT SINCE 1938! To make your program really believable, have grandma shout a different year each time; maybe any year at random between 1930 and 1950. (This part is optional, and would be much easier if you read the section on Ruby’s random number generator at the end of the methods chapter.) You can’t stop talking to grandma until you shout BYE.</p>

    <p><strong>Hint</strong>: Don’t forget about chomp! ‘BYE’with an Enter is not the same as ‘BYE’ without one!</p>

    <p><strong>Hint 2</strong>: Try to think about what parts of your program should happen over and over again. All of those should be in your while loop.</p>
  </li>
  <li>
    <p>Extend your Deaf Grandma program: What if grandma doesn’t want you to leave? When you shout BYE, she could pretend not to hear you. Change your previous program so that you have to shout BYE three times in a row. Make sure to test your program: if you shout BYE three times, but not in a row, you should still be talking to grandma.</p>
  </li>
  <li>
    <p>Leap Years. Write a program which will ask for a starting year and an ending year, and then puts all of the leap years between them (and including them, if they are also leap years). Leap years are years divisible by four (like 1984 and 2004). However, years divisible by 100 are not leap years (such as 1800 and 1900) unless they are divisible by 400 (like 1600 and 2000, which were in fact leap years). (Yes, it’s all pretty confusing, but not as confusing as having July in the middle of the winter, which is what would eventually happen.)</p>
  </li>
</ul>

<h2 id="arrays-and-iterators--chapter-7">Arrays and Iterators : Chapter 7</h2>

<p>An array is just a list in your computer. Every slot in the list acts like a variable: you can see what object a particular slot points to, and you can make it point to a different object. Let’s take a look at some arrays:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[]</span>
<span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="p">[</span><span class="s1">'Hello'</span><span class="p">,</span> <span class="s1">'Goodbye'</span><span class="p">]</span>

<span class="n">flavor</span> <span class="o">=</span> <span class="s1">'vanilla'</span>             <span class="c1"># This is not an array, of course...</span>
<span class="p">[</span><span class="mf">89.9</span><span class="p">,</span> <span class="n">flavor</span><span class="p">,</span> <span class="p">[</span><span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">]]</span>  <span class="c1"># ...but this is.</span>
</code></pre></div></div>

<p>We would reference the objects in an array:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'Ada'</span><span class="p">,</span> <span class="s1">'Belle'</span><span class="p">,</span> <span class="s1">'Chris'</span><span class="p">]</span>

<span class="nb">puts</span> <span class="n">names</span>
<span class="nb">puts</span> <span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">puts</span> <span class="n">names</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="nb">puts</span> <span class="n">names</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="nb">puts</span> <span class="n">names</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># This is out of range.</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ada
Belle
Chris
Ada
Belle
Chris
</code></pre></div></div>

<h3 id="the-method-each">The Method each</h3>

<p>If we want to say something nice about each language in the array below, we’d do this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">languages</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'English'</span><span class="p">,</span> <span class="s1">'German'</span><span class="p">,</span> <span class="s1">'Ruby'</span><span class="p">]</span>

<span class="n">languages</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">lang</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s1">'I love '</span> <span class="o">+</span> <span class="n">lang</span> <span class="o">+</span> <span class="s1">'!'</span>
  <span class="nb">puts</span> <span class="s1">'Don\'t you?'</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s1">'And let\'s hear it for C++!'</span>
<span class="nb">puts</span> <span class="s1">'...'</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I love English!
Don't you?
I love German!
Don't you?
I love Ruby!
Don't you?
And let's hear it for C++!
</code></pre></div></div>

<p>They are always followed by do…end. while and if never had a do near them; we only use do with iterators.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'Hip-Hip-Hooray!'</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hip-Hip-Hooray!
Hip-Hip-Hooray!
Hip-Hip-Hooray!
</code></pre></div></div>

<h3 id="more-array-methods">More Array Methods</h3>

<p>Let’s look at to_s and join. join works much like to_s does, except that it adds a string in between the array’s objects. Let’s take a look:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foods</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'artichoke'</span><span class="p">,</span> <span class="s1">'brioche'</span><span class="p">,</span> <span class="s1">'caramel'</span><span class="p">]</span>

<span class="nb">puts</span> <span class="n">foods</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="n">foods</span><span class="p">.</span><span class="nf">to_s</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="n">foods</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">', '</span><span class="p">)</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="n">foods</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">'  :)  '</span><span class="p">)</span> <span class="o">+</span> <span class="s1">'  8)'</span>

<span class="mi">200</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="p">[]</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>artichoke
brioche
caramel

["artichoke", "brioche", "caramel"]

artichoke, brioche, caramel

artichoke  :)  brioche  :)  caramel  8)
</code></pre></div></div>

<p>Let’s take a look at push, pop, and last. The methods push and pop are sort of opposites, like + and - are. push adds an object to the end of your array, and pop removes the last object from the array (and tell you what it was). last is similar to pop in that it tells you what’s at the end of the array, except that it leaves the array alone. Again, push and pop actually change the array:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">favorites</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">favorites</span><span class="p">.</span><span class="nf">push</span> <span class="s1">'raindrops on roses'</span>
<span class="n">favorites</span><span class="p">.</span><span class="nf">push</span> <span class="s1">'whiskey on kittens'</span>

<span class="nb">puts</span> <span class="n">favorites</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">puts</span> <span class="n">favorites</span><span class="p">.</span><span class="nf">last</span>
<span class="nb">puts</span> <span class="n">favorites</span><span class="p">.</span><span class="nf">length</span>

<span class="nb">puts</span> <span class="n">favorites</span><span class="p">.</span><span class="nf">pop</span>
<span class="nb">puts</span> <span class="n">favorites</span>
<span class="nb">puts</span> <span class="n">favorites</span><span class="p">.</span><span class="nf">length</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>raindrops on roses
whiskey on kittens
2
whiskey on kittens
raindrops on roses
1
</code></pre></div></div>

<h3 id="a-few-things-to-try--chapter-7">A Few Things to Try : Chapter 7</h3>

<ul>
  <li>
    <p>Write the program we talked about at the very beginning of this chapter.
  Hint: There’s a lovely array method which will give you a sorted version of an array: sort. Use it!</p>
  </li>
  <li>
    <p>Try writing the above program without using the sort method. A large part of programming is solving problems, so get all the practice you can!</p>
  </li>
  <li>
    <p>Rewrite your Table of Contents program (from the chapter on methods). Start the program with an array holding all of the information for your Table of Contents (chapter names, page numbers, etc.). Then print out the information from the array in a beautifully formatted Table of Contents.</p>
  </li>
</ul>

<h2 id="writing-your-own-methods--chapter-8">Writing Your Own Methods : Chapter 8</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'Hello, and thank you for taking the time to'</span>
<span class="nb">puts</span> <span class="s1">'help me with this experiment.  My experiment'</span>
<span class="nb">puts</span> <span class="s1">'has to do with the way people feel about'</span>
<span class="nb">puts</span> <span class="s1">'Mexican food.  Just think about Mexican food'</span>
<span class="nb">puts</span> <span class="s1">'and try to answer every question honestly,'</span>
<span class="nb">puts</span> <span class="s1">'with either a "yes" or a "no".  My experiment'</span>
<span class="nb">puts</span> <span class="s1">'has nothing to do with bed-wetting.'</span>
<span class="nb">puts</span>

<span class="c1"># We ask these questions, but we ignore their answers.</span>

<span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">goodAnswer</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s1">'Do you like eating tacos?'</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">downcase</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="s1">'yes'</span> <span class="ow">or</span> <span class="n">answer</span> <span class="o">==</span> <span class="s1">'no'</span><span class="p">)</span>
    <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s1">'Please answer "yes" or "no".'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">goodAnswer</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s1">'Do you like eating burritos?'</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">downcase</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="s1">'yes'</span> <span class="ow">or</span> <span class="n">answer</span> <span class="o">==</span> <span class="s1">'no'</span><span class="p">)</span>
    <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s1">'Please answer "yes" or "no".'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># We pay attention to *this* answer, though.</span>
<span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">goodAnswer</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s1">'Do you wet the bed?'</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">downcase</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="s1">'yes'</span> <span class="ow">or</span> <span class="n">answer</span> <span class="o">==</span> <span class="s1">'no'</span><span class="p">)</span>
    <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="k">if</span> <span class="n">answer</span> <span class="o">==</span> <span class="s1">'yes'</span>
      <span class="n">wetsBed</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="k">else</span>
      <span class="n">wetsBed</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s1">'Please answer "yes" or "no".'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">goodAnswer</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s1">'Do you like eating chimichangas?'</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">downcase</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="s1">'yes'</span> <span class="ow">or</span> <span class="n">answer</span> <span class="o">==</span> <span class="s1">'no'</span><span class="p">)</span>
    <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s1">'Please answer "yes" or "no".'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s1">'Just a few more questions...'</span>

<span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">goodAnswer</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s1">'Do you like eating sopapillas?'</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">downcase</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="s1">'yes'</span> <span class="ow">or</span> <span class="n">answer</span> <span class="o">==</span> <span class="s1">'no'</span><span class="p">)</span>
    <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s1">'Please answer "yes" or "no".'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Ask lots of other questions about Mexican food.</span>

<span class="nb">puts</span>
<span class="nb">puts</span> <span class="s1">'DEBRIEFING:'</span>
<span class="nb">puts</span> <span class="s1">'Thank you for taking the time to help with'</span>
<span class="nb">puts</span> <span class="s1">'this experiment.  In fact, this experiment'</span>
<span class="nb">puts</span> <span class="s1">'has nothing to do with Mexican food.  It is'</span>
<span class="nb">puts</span> <span class="s1">'an experiment about bed-wetting.  The Mexican'</span>
<span class="nb">puts</span> <span class="s1">'food was just there to catch you off guard'</span>
<span class="nb">puts</span> <span class="s1">'in the hopes that you would answer more'</span>
<span class="nb">puts</span> <span class="s1">'honestly.  Thanks again.'</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="n">wetsBed</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, and thank you for taking the time to
help me with this experiment.  My experiment
has to do with the way people feel about
Mexican food.  Just think about Mexican food
and try to answer every question honestly,
with either a "yes" or a "no".  My experiment
has nothing to do with bed-wetting.

Do you like eating tacos?
yes
Do you like eating burritos?
yes
Do you wet the bed?
no way!
Please answer "yes" or "no".
Do you wet the bed?
NO
Do you like eating chimichangas?
yes
Just a few more questions...
Do you like eating sopapillas?
yes

DEBRIEFING:
Thank you for taking the time to help with
this experiment.  In fact, this experiment
has nothing to do with Mexican food.  It is
an experiment about bed-wetting.  The Mexican
food was just there to catch you off guard
in the hopes that you would answer more
honestly.  Thanks again.

false
</code></pre></div></div>

<p>In situations like these, it’s best to write a method. Here’s how:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sayMoo</span>
  <span class="nb">puts</span> <span class="s1">'mooooooo...'</span>
<span class="k">end</span>

<span class="n">sayMoo</span>
<span class="n">sayMoo</span>
<span class="nb">puts</span> <span class="s1">'coin-coin'</span>
<span class="n">sayMoo</span>
<span class="n">sayMoo</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mooooooo...
mooooooo...
coin-coin
mooooooo...
mooooooo...
</code></pre></div></div>

<h3 id="method-parameters">Method Parameters</h3>

<p>To add a parameter to sayMoo (let’s say, the number of moos), we would do this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sayMoo</span> <span class="n">numberOfMoos</span>
  <span class="nb">puts</span> <span class="s1">'mooooooo...'</span><span class="o">*</span><span class="n">numberOfMoos</span>
<span class="k">end</span>

<span class="n">sayMoo</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="s1">'oink-oink'</span>
<span class="n">sayMoo</span>  <span class="c1"># This should give an error because the parameter is missing.</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mooooooo...mooooooo...mooooooo...
oink-oink
#&lt;ArgumentError: wrong number of arguments (given 0, expected 1)&gt;
</code></pre></div></div>

<p>numberOfMoos is a variable which points to the parameter passed in. numberOfMoos is a variable which points to the parameter passed in. So if I type in sayMoo 3, then the parameter is 3, and the variable numberOfMoos points to 3.</p>

<h3 id="local-variables">Local Variables</h3>

<p>In the following program, there are two variables:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">doubleThis</span> <span class="n">num</span>
  <span class="n">numTimes2</span> <span class="o">=</span> <span class="n">num</span><span class="o">*</span><span class="mi">2</span>
  <span class="nb">puts</span> <span class="n">num</span><span class="p">.</span><span class="nf">to_s</span><span class="o">+</span><span class="s1">' doubled is '</span><span class="o">+</span><span class="n">numTimes2</span><span class="p">.</span><span class="nf">to_s</span>
<span class="k">end</span>

<span class="n">doubleThis</span> <span class="mi">44</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>44 doubled is 88
</code></pre></div></div>

<p>The variables are num and numTimes2. They both sit inside the method doubleThis.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">doubleThis</span> <span class="n">num</span>
  <span class="n">numTimes2</span> <span class="o">=</span> <span class="n">num</span><span class="o">*</span><span class="mi">2</span>
  <span class="nb">puts</span> <span class="n">num</span><span class="p">.</span><span class="nf">to_s</span><span class="o">+</span><span class="s1">' doubled is '</span><span class="o">+</span><span class="n">numTimes2</span><span class="p">.</span><span class="nf">to_s</span>
<span class="k">end</span>

<span class="n">doubleThis</span> <span class="mi">44</span>
<span class="nb">puts</span> <span class="n">numTimes2</span><span class="p">.</span><span class="nf">to_s</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>44 doubled is 88
#&lt;NameError: undefined local variable or method `numTimes2' for #&lt;StringIO:0x00007fc89a08a880&gt;&gt;
</code></pre></div></div>

<p>While it does mean that you have no access to variables inside methods, it also means that they have no access to your variables, and thus can’t screw them up:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">littlePest</span> <span class="n">var</span>
  <span class="n">var</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="nb">puts</span> <span class="s1">'HAHA!  I ruined your variable!'</span>
<span class="k">end</span>

<span class="n">var</span> <span class="o">=</span> <span class="s1">'You can\'t even touch my variable!'</span>
<span class="n">littlePest</span> <span class="n">var</span>
<span class="nb">puts</span> <span class="n">var</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HAHA!  I ruined your variable!
You can't even touch my variable!
</code></pre></div></div>

<p>There are actually two variables in that little program named var: one inside littlePest, and one outside of it.</p>

<h3 id="return-values">Return Values</h3>

<p>gets returns a string (the string you typed in), and the + method in 5+3, (which is really 5.+(3)) returns 8. The arithmetic methods for numbers return numbers, and the arithmetic methods for strings return strings.</p>

<p>We never cared before, but let’s look at it now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">returnVal</span> <span class="o">=</span> <span class="nb">puts</span> <span class="s1">'This puts returned:'</span>
<span class="nb">puts</span> <span class="n">returnVal</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This puts returned:
</code></pre></div></div>

<p>If we wanted all of our methods to return the string ‘yellow submarine’, we would just need to put that at the end of them:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sayMoo</span> <span class="n">numberOfMoos</span>
<span class="nb">puts</span> <span class="s1">'mooooooo...'</span><span class="p">\</span><span class="o">*</span><span class="n">numberOfMoos</span>
<span class="s1">'yellow submarine'</span>
<span class="k">end</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">sayMoo</span> <span class="mi">2</span>
<span class="nb">puts</span> <span class="n">x</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mooooooo...mooooooo...
yellow submarine
</code></pre></div></div>

<p>It will need to take the question as a parameter, and return true if they answered yes and false if they answered no.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ask</span> <span class="n">question</span>
  <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">goodAnswer</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">question</span>
    <span class="n">reply</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">downcase</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">reply</span> <span class="o">==</span> <span class="s1">'yes'</span> <span class="ow">or</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">'no'</span><span class="p">)</span>
      <span class="n">goodAnswer</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="k">if</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">'yes'</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="k">else</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="kp">false</span>
      <span class="k">end</span>
    <span class="k">else</span>
      <span class="nb">puts</span> <span class="s1">'Please answer "yes" or "no".'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">answer</span>  <span class="c1"># This is what we return (true or false).</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s1">'Hello, and thank you for...'</span>
<span class="nb">puts</span>

<span class="n">ask</span> <span class="s1">'Do you like eating tacos?'</span>      <span class="c1"># We ignore this return value.</span>
<span class="n">ask</span> <span class="s1">'Do you like eating burritos?'</span>
<span class="n">wetsBed</span> <span class="o">=</span> <span class="n">ask</span> <span class="s1">'Do you wet the bed?'</span>  <span class="c1"># We save this return value.</span>
<span class="n">ask</span> <span class="s1">'Do you like eating chimichangas?'</span>
<span class="n">ask</span> <span class="s1">'Do you like eating sopapillas?'</span>
<span class="n">ask</span> <span class="s1">'Do you like eating tamales?'</span>
<span class="nb">puts</span> <span class="s1">'Just a few more questions...'</span>
<span class="n">ask</span> <span class="s1">'Do you like drinking horchata?'</span>
<span class="n">ask</span> <span class="s1">'Do you like eating flautas?'</span>

<span class="nb">puts</span>
<span class="nb">puts</span> <span class="s1">'DEBRIEFING:'</span>
<span class="nb">puts</span> <span class="s1">'Thank you for...'</span>
<span class="nb">puts</span>
<span class="nb">puts</span> <span class="n">wetsBed</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, and thank you for...

Do you like eating tacos?
yes
Do you like eating burritos?
yes
Do you wet the bed?
no way!
Please answer "yes" or "no".
Do you wet the bed?
NO
Do you like eating chimichangas?
yes
Do you like eating sopapillas?
yes
Do you like eating tamales?
yes
Just a few more questions...
Do you like drinking horchata?
yes
Do you like eating flautas?
yes

DEBRIEFING:
Thank you for...

false
</code></pre></div></div>

<h3 id="one-more-big-example">One More Big Example</h3>

<p>It will take a number, like 22, and return the english version of it (in this case, the string ‘twenty-two’). For now, let’s have it only work on integers from 0 to 100.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">englishNumber</span> <span class="n">number</span>
  <span class="c1"># We only want numbers from 0-100.</span>
  <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="s1">'Please enter a number zero or greater.'</span>
  <span class="k">end</span>
  <span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">100</span>
    <span class="k">return</span> <span class="s1">'Please enter a number 100 or lesser.'</span>
  <span class="k">end</span>

  <span class="n">numString</span> <span class="o">=</span> <span class="s1">''</span>  <span class="c1"># This is the string we will return.</span>

  <span class="c1"># "left" is how much of the number we still have left to write out.</span>
  <span class="c1"># "write" is the part we are writing out right now.</span>
  <span class="c1"># write and left... get it?  :)</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="n">number</span>
  <span class="n">write</span> <span class="o">=</span> <span class="n">left</span><span class="o">/</span><span class="mi">100</span>          <span class="c1"># How many hundreds left to write out?</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">write</span><span class="o">*</span><span class="mi">100</span>  <span class="c1"># Subtract off those hundreds.</span>

  <span class="k">if</span> <span class="n">write</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="s1">'one hundred'</span>
  <span class="k">end</span>

  <span class="n">write</span> <span class="o">=</span> <span class="n">left</span><span class="o">/</span><span class="mi">10</span>          <span class="c1"># How many tens left to write out?</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">write</span><span class="o">*</span><span class="mi">10</span>  <span class="c1"># Subtract off those tens.</span>

  <span class="k">if</span> <span class="n">write</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">1</span>  <span class="c1"># Uh-oh...</span>
      <span class="c1"># Since we can't write "tenty-two" instead of "twelve",</span>
      <span class="c1"># we have to make a special exception for these.</span>
      <span class="k">if</span>    <span class="n">left</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'ten'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">1</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'eleven'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">2</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'twelve'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">3</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'thirteen'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">4</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'fourteen'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">5</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'fifteen'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">6</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'sixteen'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">7</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'seventeen'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">8</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'eighteen'</span>
      <span class="k">elsif</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">9</span>
        <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'nineteen'</span>
      <span class="k">end</span>
      <span class="c1"># Since we took care of the digit in the ones place already,</span>
      <span class="c1"># we have nothing left to write.</span>
      <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">2</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'twenty'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">3</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'thirty'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">4</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'forty'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">5</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'fifty'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">6</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'sixty'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">7</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'seventy'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">8</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'eighty'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">9</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'ninety'</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="mi">0</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'-'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">write</span> <span class="o">=</span> <span class="n">left</span>  <span class="c1"># How many ones left to write out?</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="mi">0</span>     <span class="c1"># Subtract off those ones.</span>

  <span class="k">if</span> <span class="n">write</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">if</span>    <span class="n">write</span> <span class="o">==</span> <span class="mi">1</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'one'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">2</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'two'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">3</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'three'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">4</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'four'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">5</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'five'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">6</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'six'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">7</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'seven'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">8</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'eight'</span>
    <span class="k">elsif</span> <span class="n">write</span> <span class="o">==</span> <span class="mi">9</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'nine'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">if</span> <span class="n">numString</span> <span class="o">==</span> <span class="s1">''</span>
    <span class="c1"># The only way "numString" could be empty is if</span>
    <span class="c1"># "number" is 0.</span>
    <span class="k">return</span> <span class="s1">'zero'</span>
  <span class="k">end</span>

  <span class="c1"># If we got this far, then we had a number somewhere</span>
  <span class="c1"># in between 0 and 100, so we need to return "numString".</span>
  <span class="n">numString</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span>  <span class="mi">0</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span>  <span class="mi">9</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">10</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">11</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">17</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">32</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">88</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">99</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zero
nine
ten
eleven
seventeen
thirty-two
eighty-eight
ninety-nine
one hundred
</code></pre></div></div>

<p>Let’s use some arrays and try to clean it up a bit:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">englishNumber</span> <span class="n">number</span>
  <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">0</span>  <span class="c1"># No negative numbers.</span>
    <span class="k">return</span> <span class="s1">'Please enter a number that isn\'t negative.'</span>
  <span class="k">end</span>
  <span class="k">if</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="s1">'zero'</span>
  <span class="k">end</span>

  <span class="c1"># No more special cases! No more returns!</span>

  <span class="n">numString</span> <span class="o">=</span> <span class="s1">''</span>  <span class="c1"># This is the string we will return.</span>

  <span class="n">onesPlace</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'one'</span><span class="p">,</span>     <span class="s1">'two'</span><span class="p">,</span>       <span class="s1">'three'</span><span class="p">,</span>    <span class="s1">'four'</span><span class="p">,</span>     <span class="s1">'five'</span><span class="p">,</span>
               <span class="s1">'six'</span><span class="p">,</span>     <span class="s1">'seven'</span><span class="p">,</span>     <span class="s1">'eight'</span><span class="p">,</span>    <span class="s1">'nine'</span><span class="p">]</span>
  <span class="n">tensPlace</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'ten'</span><span class="p">,</span>     <span class="s1">'twenty'</span><span class="p">,</span>    <span class="s1">'thirty'</span><span class="p">,</span>   <span class="s1">'forty'</span><span class="p">,</span>    <span class="s1">'fifty'</span><span class="p">,</span>
               <span class="s1">'sixty'</span><span class="p">,</span>   <span class="s1">'seventy'</span><span class="p">,</span>   <span class="s1">'eighty'</span><span class="p">,</span>   <span class="s1">'ninety'</span><span class="p">]</span>
  <span class="n">teenagers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'eleven'</span><span class="p">,</span>  <span class="s1">'twelve'</span><span class="p">,</span>    <span class="s1">'thirteen'</span><span class="p">,</span> <span class="s1">'fourteen'</span><span class="p">,</span> <span class="s1">'fifteen'</span><span class="p">,</span>
               <span class="s1">'sixteen'</span><span class="p">,</span> <span class="s1">'seventeen'</span><span class="p">,</span> <span class="s1">'eighteen'</span><span class="p">,</span> <span class="s1">'nineteen'</span><span class="p">]</span>

  <span class="c1"># "left" is how much of the number we still have left to write out.</span>
  <span class="c1"># "write" is the part we are writing out right now.</span>
  <span class="c1"># write and left... get it?  :)</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="n">number</span>
  <span class="n">write</span> <span class="o">=</span> <span class="n">left</span><span class="o">/</span><span class="mi">100</span>          <span class="c1"># How many hundreds left to write out?</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">write</span><span class="o">*</span><span class="mi">100</span>  <span class="c1"># Subtract off those hundreds.</span>

  <span class="k">if</span> <span class="n">write</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="c1"># Now here's a really sly trick:</span>
    <span class="n">hundreds</span>  <span class="o">=</span> <span class="n">englishNumber</span> <span class="n">write</span>
    <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="n">hundreds</span> <span class="o">+</span> <span class="s1">' hundred'</span>
    <span class="c1"># That's called "recursion". So what did I just do?</span>
    <span class="c1"># I told this method to call itself, but with "write" instead of</span>
    <span class="c1"># "number". Remember that "write" is (at the moment) the number of</span>
    <span class="c1"># hundreds we have to write out. After we add "hundreds" to</span>
    <span class="c1"># "numString", we add the string ' hundred' after it.</span>
    <span class="c1"># So, for example, if we originally called englishNumber with</span>
    <span class="c1"># 1999 (so "number" = 1999), then at this point "write" would</span>
    <span class="c1"># be 19, and "left" would be 99. The laziest thing to do at this</span>
    <span class="c1"># point is to have englishNumber write out the 'nineteen' for us,</span>
    <span class="c1"># then we write out ' hundred', and then the rest of</span>
    <span class="c1"># englishNumber writes out 'ninety-nine'.</span>

    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="mi">0</span>
      <span class="c1"># So we don't write 'two hundredfifty-one'...</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">' '</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">write</span> <span class="o">=</span> <span class="n">left</span><span class="o">/</span><span class="mi">10</span>          <span class="c1"># How many tens left to write out?</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">write</span><span class="o">*</span><span class="mi">10</span>  <span class="c1"># Subtract off those tens.</span>

  <span class="k">if</span> <span class="n">write</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">write</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span>
      <span class="c1"># Since we can't write "tenty-two" instead of "twelve",</span>
      <span class="c1"># we have to make a special exception for these.</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="n">teenagers</span><span class="p">[</span><span class="n">left</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
      <span class="c1"># The "-1" is because teenagers[3] is 'fourteen', not 'thirteen'.</span>

      <span class="c1"># Since we took care of the digit in the ones place already,</span>
      <span class="c1"># we have nothing left to write.</span>
      <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">else</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="n">tensPlace</span><span class="p">[</span><span class="n">write</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
      <span class="c1"># The "-1" is because tensPlace[3] is 'forty', not 'thirty'.</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="mi">0</span>
      <span class="c1"># So we don't write 'sixtyfour'...</span>
      <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="s1">'-'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">write</span> <span class="o">=</span> <span class="n">left</span>  <span class="c1"># How many ones left to write out?</span>
  <span class="n">left</span>  <span class="o">=</span> <span class="mi">0</span>     <span class="c1"># Subtract off those ones.</span>

  <span class="k">if</span> <span class="n">write</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="n">numString</span> <span class="o">=</span> <span class="n">numString</span> <span class="o">+</span> <span class="n">onesPlace</span><span class="p">[</span><span class="n">write</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="c1"># The "-1" is because onesPlace[3] is 'four', not 'three'.</span>
  <span class="k">end</span>

  <span class="c1"># Now we just return "numString"...</span>
  <span class="n">numString</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span>  <span class="mi">0</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span>  <span class="mi">9</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">10</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">11</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">17</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">32</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">88</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span> <span class="mi">99</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">101</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">234</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">3211</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">999999</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">englishNumber</span><span class="p">(</span><span class="mi">1000000000000</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zero
nine
ten
eleven
seventeen
thirty-two
eighty-eight
ninety-nine
one hundred
one hundred one
two hundred thirty-four
thirty-two hundred eleven
ninety-nine hundred ninety-nine hundred ninety-nine
one hundred hundred hundred hundred hundred hundred
</code></pre></div></div>

<p>I think ‘one trillion’ would be a nicer return value for that last number, or even ‘one million million’ (though all three are correct).</p>

<h3 id="a-few-things-to-try--chapter-8">A Few Things to Try : Chapter 8</h3>

<ul>
  <li>
    <p>Expand upon englishNumber. First, put in thousands. So it should return ‘one thousand’ instead of ‘ten hundred’ and ‘ten thousand’ instead of ‘one hundred hundred’.</p>
  </li>
  <li>
    <p>Expand upon englishNumber some more. Now put in millions, so you get ‘one million’ instead of ‘one thousand thousand’. Then try adding billions and trillions. How high can you go?</p>
  </li>
  <li>
    <p>How about weddingNumber? It should work almost the same as englishNumber, except that it should insert the word “and” all over the place, returning things like ‘nineteen hundred and seventy and two’, or however wedding invitations are supposed to look. I’d give you more examples, but I don’t fully understand it myself. You might need to contact a wedding coordinator to help you.</p>
  </li>
  <li>
    <p>“Ninety-nine bottles of beer…” Using englishNumber and your old program, write out the lyrics to this song the right way this time. Punish your computer: have it start at 9999. (Don’t pick a number too large, though, because writing all of that to the screen takes your computer quite a while. A hundred thousand bottles of beer takes some time; and if you pick a million, you’ll be punishing yourself as well!)</p>
  </li>
</ul>

<h2 id="classes--chapter-9">Classes : Chapter 9</h2>

<p>We’ve seen several different kinds, or classes, of objects: strings, integers, floats, arrays, and a few special objects (true, false, and nil). In Ruby, these classes are always capitalized: String, Integer, Float, Array… etc. In general, if we want to create a new object of a certain class, we use new:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="no">Array</span><span class="p">.</span><span class="nf">new</span>  <span class="o">+</span> <span class="p">[</span><span class="mi">12345</span><span class="p">]</span>  <span class="c1"># Array  addition.</span>
<span class="n">b</span> <span class="o">=</span> <span class="no">String</span><span class="p">.</span><span class="nf">new</span> <span class="o">+</span> <span class="s1">'hello'</span>  <span class="c1"># String addition.</span>
<span class="n">c</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">new</span>

<span class="nb">puts</span> <span class="s1">'a = '</span><span class="o">+</span><span class="n">a</span><span class="p">.</span><span class="nf">to_s</span>
<span class="nb">puts</span> <span class="s1">'b = '</span><span class="o">+</span><span class="n">b</span><span class="p">.</span><span class="nf">to_s</span>
<span class="nb">puts</span> <span class="s1">'c = '</span><span class="o">+</span><span class="n">c</span><span class="p">.</span><span class="nf">to_s</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [12345]
b = hello
c = 2021-02-26 13:39:11 -0800
</code></pre></div></div>

<p>Because we can create arrays and strings using […] and ‘…’ respectively, we rarely create them using new.</p>

<h3 id="the-time-class">The Time Class</h3>

<p>Time objects represent moments in time. You can add (or subtract) numbers to (or from) times to get new times: adding 1.5 to a time makes a new time one-and-a-half seconds later:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">time</span>  <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">new</span>   <span class="c1"># The moment I generated this web page.</span>
<span class="n">time2</span> <span class="o">=</span> <span class="n">time</span> <span class="o">+</span> <span class="mi">60</span>  <span class="c1"># One minute later.</span>

<span class="nb">puts</span> <span class="n">time</span>
<span class="nb">puts</span> <span class="n">time2</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2021-02-26 13:39:11 -0800
2021-02-26 13:40:11 -0800
</code></pre></div></div>

<p>You can also make a time for a specific moment using Time.mktime:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="no">Time</span><span class="p">.</span><span class="nf">mktime</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># Y2K.</span>
<span class="nb">puts</span> <span class="no">Time</span><span class="p">.</span><span class="nf">mktime</span><span class="p">(</span><span class="mi">1976</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="c1"># When I was born.</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2000-01-01 00:00:00 -0800
1976-08-03 10:11:00 -0700
</code></pre></div></div>

<p>Notice: that’s when I was born in Pacific Daylight Savings Time (PDT). When Y2K struck, though, it was Pacific Standard Time (PST), at least to us West Coasters.</p>

<h3 id="a-few-things-to-try--chapter-9">A Few Things to Try : Chapter 9</h3>

<ul>
  <li>
    <p>One billion seconds… Find out the exact second you were born (if you can). Figure out when you will turn (or perhaps when you did turn?) one billion seconds old. Then go mark your calendar.</p>
  </li>
  <li>
    <p>Happy Birthday! Ask what year a person was born in, then the month, then the day. Figure out how old they are and give them a big SPANK! for each birthday they have had.</p>
  </li>
</ul>

<h3 id="the-hash-class">The Hash Class</h3>

<p>Hashes are a lot like arrays: they have a bunch of slots which can point to various objects. In an array, the slots are lined up in a row, and each one is numbered (starting from zero). In a hash, the slots aren’t in a row (they are just sort of jumbled together), and you can use any object to refer to a slot, not just a number.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colorArray</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># same as Array.new</span>
<span class="n">colorHash</span>  <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># same as Hash.new</span>

<span class="n">colorArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>         <span class="o">=</span> <span class="s1">'red'</span>
<span class="n">colorArray</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>         <span class="o">=</span> <span class="s1">'green'</span>
<span class="n">colorArray</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>         <span class="o">=</span> <span class="s1">'blue'</span>
<span class="n">colorHash</span><span class="p">[</span><span class="s1">'strings'</span><span class="p">]</span>  <span class="o">=</span> <span class="s1">'red'</span>
<span class="n">colorHash</span><span class="p">[</span><span class="s1">'numbers'</span><span class="p">]</span>  <span class="o">=</span> <span class="s1">'green'</span>
<span class="n">colorHash</span><span class="p">[</span><span class="s1">'keywords'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'blue'</span>

<span class="n">colorArray</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">color</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">color</span>
<span class="k">end</span>
<span class="n">colorHash</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">codeType</span><span class="p">,</span> <span class="n">color</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">codeType</span> <span class="o">+</span> <span class="s1">':  '</span> <span class="o">+</span> <span class="n">color</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>red
green
blue
strings:  red
numbers:  green
keywords:  blue
</code></pre></div></div>

<p>Though people usually use strings to name the slots in a hash, you could use any kind of object, even arrays and other hashes :</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weirdHash</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">new</span>

<span class="n">weirdHash</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'monkeys'</span>
<span class="n">weirdHash</span><span class="p">[[]]</span> <span class="o">=</span> <span class="s1">'emptiness'</span>
<span class="n">weirdHash</span><span class="p">[</span><span class="no">Time</span><span class="p">.</span><span class="nf">new</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'no time like the present'</span>
</code></pre></div></div>

<p>Hashes and arrays are good for different things.</p>

<h3 id="extending-classes">Extending Classes</h3>

<p>We could write something like 22.to_eng instead of englishNumber 22</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Integer</span>
  <span class="k">def</span> <span class="nf">to_eng</span>
    <span class="k">if</span> <span class="nb">self</span> <span class="o">==</span> <span class="mi">5</span>
      <span class="n">english</span> <span class="o">=</span> <span class="s1">'five'</span>
    <span class="k">else</span>
      <span class="n">english</span> <span class="o">=</span> <span class="s1">'fifty-eight'</span>
    <span class="k">end</span>

    <span class="n">english</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># I'd better test on a couple of numbers...</span>
<span class="nb">puts</span> <span class="mi">5</span><span class="p">.</span><span class="nf">to_eng</span>
<span class="nb">puts</span> <span class="mi">58</span><span class="p">.</span><span class="nf">to_eng</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>five
fifty-eight
</code></pre></div></div>

<p>We defined an integer method by jumping into the Integer class, defining the method there, and jumping back out.</p>

<h3 id="creating-classes">Creating Classes</h3>

<p>We could make the Die class:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Die</span>

  <span class="k">def</span> <span class="nf">roll</span>
    <span class="mi">1</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="c1"># Let's make a couple of dice...</span>
<span class="n">dice</span> <span class="o">=</span> <span class="p">[</span><span class="no">Die</span><span class="p">.</span><span class="nf">new</span><span class="p">,</span> <span class="no">Die</span><span class="p">.</span><span class="nf">new</span><span class="p">]</span>

<span class="c1"># ...and roll them.</span>
<span class="n">dice</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">die</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">die</span><span class="p">.</span><span class="nf">roll</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6
2
</code></pre></div></div>

<p>If we skipped the section on random numbers, rand(6) just gives a random number between 0 and 5.</p>

<h3 id="instance-variables">Instance Variables</h3>

<p>We could also call it a string object. Sometimes programmers might call it an instance of the class String, but this is just a fancy (and rather long-winded) way of saying string. An instance of a class is just an object of that class.</p>

<p>A method’s local variables last until the method is finished. An object’s instance variables, on the other hand, will last as long as the object does.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Die</span>

  <span class="k">def</span> <span class="nf">roll</span>
    <span class="vi">@numberShowing</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">showing</span>
    <span class="vi">@numberShowing</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="n">die</span> <span class="o">=</span> <span class="no">Die</span><span class="p">.</span><span class="nf">new</span>
<span class="n">die</span><span class="p">.</span><span class="nf">roll</span>
<span class="nb">puts</span> <span class="n">die</span><span class="p">.</span><span class="nf">showing</span>
<span class="nb">puts</span> <span class="n">die</span><span class="p">.</span><span class="nf">showing</span>
<span class="n">die</span><span class="p">.</span><span class="nf">roll</span>
<span class="nb">puts</span> <span class="n">die</span><span class="p">.</span><span class="nf">showing</span>
<span class="nb">puts</span> <span class="n">die</span><span class="p">.</span><span class="nf">showing</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4
4
6
6
</code></pre></div></div>

<p>So roll rolls the die and showing tells us which number is showing.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Die</span>

  <span class="k">def</span> <span class="nf">roll</span>
    <span class="vi">@numberShowing</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">showing</span>
    <span class="vi">@numberShowing</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="c1"># Since I'm not going to use this die again,</span>
<span class="c1"># I don't need to save it in a variable.</span>
<span class="nb">puts</span> <span class="no">Die</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">showing</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p>It would be nice if we could set up our new die object right when it’s created. That’s what initialize is for:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Die</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="c1"># I'll just roll the die, though we</span>
    <span class="c1"># could do something else if we wanted</span>
    <span class="c1"># to, like setting the die with 6 showing.</span>
    <span class="n">roll</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">roll</span>
    <span class="vi">@numberShowing</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">showing</span>
    <span class="vi">@numberShowing</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="nb">puts</span> <span class="no">Die</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">showing</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
</code></pre></div></div>

<p>When an object is created, its initialize method (if it has one defined) is always called.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="nb">name</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="vi">@stuffInBelly</span>     <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># He's full.</span>
    <span class="vi">@stuffInIntestine</span> <span class="o">=</span>  <span class="mi">0</span>  <span class="c1"># He doesn't need to go.</span>

    <span class="nb">puts</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' is born.'</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">feed</span>
    <span class="nb">puts</span> <span class="s1">'You feed '</span> <span class="o">+</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">'.'</span>
    <span class="vi">@stuffInBelly</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">passageOfTime</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">walk</span>
    <span class="nb">puts</span> <span class="s1">'You walk '</span> <span class="o">+</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">'.'</span>
    <span class="vi">@stuffInIntestine</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">passageOfTime</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">putToBed</span>
    <span class="nb">puts</span> <span class="s1">'You put '</span> <span class="o">+</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' to bed.'</span>
    <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
      <span class="k">if</span> <span class="vi">@asleep</span>
        <span class="n">passageOfTime</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="vi">@asleep</span>
        <span class="nb">puts</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' snores, filling the room with smoke.'</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="k">if</span> <span class="vi">@asleep</span>
      <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
      <span class="nb">puts</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' wakes up slowly.'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">toss</span>
    <span class="nb">puts</span> <span class="s1">'You toss '</span> <span class="o">+</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' up into the air.'</span>
    <span class="nb">puts</span> <span class="s1">'He giggles, which singes your eyebrows.'</span>
    <span class="n">passageOfTime</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">rock</span>
    <span class="nb">puts</span> <span class="s1">'You rock '</span> <span class="o">+</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' gently.'</span>
    <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="nb">puts</span> <span class="s1">'He briefly dozes off...'</span>
    <span class="n">passageOfTime</span>
    <span class="k">if</span> <span class="vi">@asleep</span>
      <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
      <span class="nb">puts</span> <span class="s1">'...but wakes when you stop.'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="c1"># "private" means that the methods defined here are</span>
  <span class="c1"># methods internal to the object.  (You can feed</span>
  <span class="c1"># your dragon, but you can't ask him if he's hungry.)</span>

  <span class="k">def</span> <span class="nf">hungry?</span>
    <span class="c1"># Method names can end with "?".</span>
    <span class="c1"># Usually, we only do this if the method</span>
    <span class="c1"># returns true or false, like this:</span>
    <span class="vi">@stuffInBelly</span> <span class="o">&lt;=</span> <span class="mi">2</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">poopy?</span>
    <span class="vi">@stuffInIntestine</span> <span class="o">&gt;=</span> <span class="mi">8</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">passageOfTime</span>
    <span class="k">if</span> <span class="vi">@stuffInBelly</span> <span class="o">&gt;</span> <span class="mi">0</span>
      <span class="c1"># Move food from belly to intestine.</span>
      <span class="vi">@stuffInBelly</span>     <span class="o">=</span> <span class="vi">@stuffInBelly</span>     <span class="o">-</span> <span class="mi">1</span>
      <span class="vi">@stuffInIntestine</span> <span class="o">=</span> <span class="vi">@stuffInIntestine</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">else</span>  <span class="c1"># Our dragon is starving!</span>
      <span class="k">if</span> <span class="vi">@asleep</span>
        <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
        <span class="nb">puts</span> <span class="s1">'He wakes up suddenly!'</span>
      <span class="k">end</span>
      <span class="nb">puts</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' is starving!  In desperation, he ate YOU!'</span>
      <span class="nb">exit</span>  <span class="c1"># This quits the program.</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="vi">@stuffInIntestine</span> <span class="o">&gt;=</span> <span class="mi">10</span>
      <span class="vi">@stuffInIntestine</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nb">puts</span> <span class="s1">'Whoops!  '</span> <span class="o">+</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' had an accident...'</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">hungry?</span>
      <span class="k">if</span> <span class="vi">@asleep</span>
        <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
        <span class="nb">puts</span> <span class="s1">'He wakes up suddenly!'</span>
      <span class="k">end</span>
      <span class="nb">puts</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">'\'s stomach grumbles...'</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">poopy?</span>
      <span class="k">if</span> <span class="vi">@asleep</span>
        <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
        <span class="nb">puts</span> <span class="s1">'He wakes up suddenly!'</span>
      <span class="k">end</span>
      <span class="nb">puts</span> <span class="vi">@name</span> <span class="o">+</span> <span class="s1">' does the potty dance...'</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="n">pet</span> <span class="o">=</span> <span class="no">Dragon</span><span class="p">.</span><span class="nf">new</span> <span class="s1">'Norbert'</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">feed</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">toss</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">walk</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">putToBed</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">rock</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">putToBed</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">putToBed</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">putToBed</span>
<span class="n">pet</span><span class="p">.</span><span class="nf">putToBed</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Norbert is born.
You feed Norbert.
You toss Norbert up into the air.
He giggles, which singes your eyebrows.
You walk Norbert.
You put Norbert to bed.
Norbert snores, filling the room with smoke.
Norbert snores, filling the room with smoke.
Norbert snores, filling the room with smoke.
Norbert wakes up slowly.
You rock Norbert gently.
He briefly dozes off...
...but wakes when you stop.
You put Norbert to bed.
He wakes up suddenly!
Norbert's stomach grumbles...
You put Norbert to bed.
He wakes up suddenly!
Norbert's stomach grumbles...
You put Norbert to bed.
He wakes up suddenly!
Norbert's stomach grumbles...
Norbert does the potty dance...
You put Norbert to bed.
He wakes up suddenly!
Norbert is starving!  In desperation, he ate YOU!
</code></pre></div></div>

<h3 id="a-few-things-to-try--chapter-91">A Few Things to Try : Chapter 9.1</h3>

<ul>
  <li>
    <p>Make an OrangeTree class. It should have a height method which returns its height, and a oneYearPasses method, which, when called, ages the tree one year. Each year the tree grows taller (however much you think an orange tree should grow in a year), and after some number of years (again, your call) the tree should die. For the first few years, it should not produce fruit, but after a while it should, and I guess that older trees produce more each year than younger trees… whatever you think makes most sense. And, of course, you should be able to countTheOranges (which returns the number of oranges on the tree), and pickAnOrange (which reduces the @orangeCount by one and returns a string telling you how delicious the orange was, or else it just tells you that there are no more oranges to pick this year). Make sure that any oranges you don’t pick one year fall off before the next year.</p>
  </li>
  <li>
    <p>Write a program so that you can interact with your baby dragon. You should be able to enter commands like feed and walk, and have those methods be called on your dragon. Of course, since what you are inputting are just strings, you will have to have some sort of method dispatch, where your program checks which string was entered, and then calls the appropriate method.</p>
  </li>
</ul>

<h2 id="blocks-and-procs--chapter-10">Blocks and Procs : Chapter 10</h2>

<p>It’s the ability to take a block of code (code in between do and end), wrap it up in an object (called a proc), store it in a variable or pass it to a method, and run the code in the block whenever you feel like (more than once, if you want). So it’s kind of like a method itself, except that it isn’t bound to an object (it is an object), and you can store it or pass it around like you can with any object.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">toast</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'Cheers!'</span>
<span class="k">end</span>

<span class="n">toast</span><span class="p">.</span><span class="nf">call</span>
<span class="n">toast</span><span class="p">.</span><span class="nf">call</span>
<span class="n">toast</span><span class="p">.</span><span class="nf">call</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cheers!
Cheers!
Cheers!
</code></pre></div></div>

<p>Actually, it’s even more like a method than I have shown you, because blocks can take parameters:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doYouLike</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">aGoodThing</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s1">'I *really* like '</span><span class="o">+</span><span class="n">aGoodThing</span><span class="o">+</span><span class="s1">'!'</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>doYouLike.call 'chocolate'
doYouLike.call 'ruby'

I *really* like chocolate!
I *really* like ruby!
</code></pre></div></div>

<h3 id="methods-which-take-procs">Methods Which Take Procs</h3>

<p>When we pass a proc into a method, we can control how, if, or how many times we call the proc.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">doSelfImportantly</span> <span class="n">someProc</span>
  <span class="nb">puts</span> <span class="s1">'Everybody just HOLD ON!  I have something to do...'</span>
  <span class="n">someProc</span><span class="p">.</span><span class="nf">call</span>
  <span class="nb">puts</span> <span class="s1">'Ok everyone, I\'m done.  Go on with what you were doing.'</span>
<span class="k">end</span>

<span class="n">sayHello</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'hello'</span>
<span class="k">end</span>

<span class="n">sayGoodbye</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'goodbye'</span>
<span class="k">end</span>

<span class="n">doSelfImportantly</span> <span class="n">sayHello</span>
<span class="n">doSelfImportantly</span> <span class="n">sayGoodbye</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Everybody just HOLD ON!  I have something to do...
hello
Ok everyone, I'm done.  Go on with what you were doing.
Everybody just HOLD ON!  I have something to do...
goodbye
Ok everyone, I'm done.  Go on with what you were doing.
</code></pre></div></div>

<p>Here’s a method which will call the proc passed in about half of the time, and another which will call it twice:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">maybeDo</span> <span class="n">someProc</span>
  <span class="k">if</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="n">someProc</span><span class="p">.</span><span class="nf">call</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">twiceDo</span> <span class="n">someProc</span>
  <span class="n">someProc</span><span class="p">.</span><span class="nf">call</span>
  <span class="n">someProc</span><span class="p">.</span><span class="nf">call</span>
<span class="k">end</span>

<span class="n">wink</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'&lt;wink&gt;'</span>
<span class="k">end</span>

<span class="n">glance</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'&lt;glance&gt;'</span>
<span class="k">end</span>

<span class="n">maybeDo</span> <span class="n">wink</span>
<span class="n">maybeDo</span> <span class="n">glance</span>
<span class="n">twiceDo</span> <span class="n">wink</span>
<span class="n">twiceDo</span> <span class="n">glance</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;wink&gt;
&lt;wink&gt;
&lt;glance&gt;
&lt;glance&gt;
</code></pre></div></div>

<p>The method will return the last non-false value returned by the proc.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">doUntilFalse</span> <span class="n">firstInput</span><span class="p">,</span> <span class="n">someProc</span>
  <span class="n">input</span>  <span class="o">=</span> <span class="n">firstInput</span>
  <span class="n">output</span> <span class="o">=</span> <span class="n">firstInput</span>

  <span class="k">while</span> <span class="n">output</span>
    <span class="n">input</span>  <span class="o">=</span> <span class="n">output</span>
    <span class="n">output</span> <span class="o">=</span> <span class="n">someProc</span><span class="p">.</span><span class="nf">call</span> <span class="n">input</span>
  <span class="k">end</span>

  <span class="n">input</span>
<span class="k">end</span>

<span class="n">buildArrayOfSquares</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">array</span><span class="o">|</span>
  <span class="n">lastNumber</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">last</span>
  <span class="k">if</span> <span class="n">lastNumber</span> <span class="o">&lt;=</span> <span class="mi">0</span>
    <span class="kp">false</span>
  <span class="k">else</span>
    <span class="n">array</span><span class="p">.</span><span class="nf">pop</span>                         <span class="c1"># Take off the last number...</span>
    <span class="n">array</span><span class="p">.</span><span class="nf">push</span> <span class="n">lastNumber</span><span class="o">*</span><span class="n">lastNumber</span>  <span class="c1"># ...and replace it with its square...</span>
    <span class="n">array</span><span class="p">.</span><span class="nf">push</span> <span class="n">lastNumber</span><span class="o">-</span><span class="mi">1</span>           <span class="c1"># ...followed by the next smaller number.</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">alwaysFalse</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">justIgnoreMe</span><span class="o">|</span>
  <span class="kp">false</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">doUntilFalse</span><span class="p">([</span><span class="mi">5</span><span class="p">],</span> <span class="n">buildArrayOfSquares</span><span class="p">).</span><span class="nf">inspect</span>
<span class="nb">puts</span> <span class="n">doUntilFalse</span><span class="p">(</span><span class="s1">'I\'m writing this at 3:00 am; someone knock me out!'</span><span class="p">,</span> <span class="n">alwaysFalse</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[25, 16, 9, 4, 1, 0]
I'm writing this at 3:00 am; someone knock me out!
</code></pre></div></div>

<h3 id="methods-which-return-procs">Methods Which Return Procs</h3>

<p>We can do with procs is to create them in methods and return them. This allows all sorts of crazy programming power (things with impressive names, like lazy evaluation, infinite data structures, and currying).
In this example, compose takes two procs and returns a new proc which, when called, calls the first proc and passes its result into the second proc.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compose</span> <span class="n">proc1</span><span class="p">,</span> <span class="n">proc2</span>
  <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="n">proc2</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">proc1</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">squareIt</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
<span class="k">end</span>

<span class="n">doubleIt</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span> <span class="o">+</span> <span class="n">x</span>
<span class="k">end</span>

<span class="n">doubleThenSquare</span> <span class="o">=</span> <span class="n">compose</span> <span class="n">doubleIt</span><span class="p">,</span> <span class="n">squareIt</span>
<span class="n">squareThenDouble</span> <span class="o">=</span> <span class="n">compose</span> <span class="n">squareIt</span><span class="p">,</span> <span class="n">doubleIt</span>

<span class="nb">puts</span> <span class="n">doubleThenSquare</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">squareThenDouble</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100
50
</code></pre></div></div>

<h3 id="passing-blocks-not-procs-into-methods">Passing Blocks (Not Procs) into Methods</h3>

<p>A lot of the problem is that there are three steps you have to go through (defining the method, making the proc, and calling the method with the proc), when it sort of feels like there should only be two (defining the method, and passing the block right into the method, without using a proc at all), since most of the time you don’t want to use the proc/block after you pass it into the method.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">eachEven</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wasABlock_nowAProc</span><span class="p">)</span>
    <span class="c1"># We start with "true" because arrays start with 0, which is even.</span>
    <span class="n">isEven</span> <span class="o">=</span> <span class="kp">true</span>

    <span class="nb">self</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span>
      <span class="k">if</span> <span class="n">isEven</span>
        <span class="n">wasABlock_nowAProc</span><span class="p">.</span><span class="nf">call</span> <span class="n">object</span>
      <span class="k">end</span>

      <span class="n">isEven</span> <span class="o">=</span> <span class="p">(</span><span class="ow">not</span> <span class="n">isEven</span><span class="p">)</span>  <span class="c1"># Toggle from even to odd, or odd to even.</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="p">[</span><span class="s1">'apple'</span><span class="p">,</span> <span class="s1">'bad apple'</span><span class="p">,</span> <span class="s1">'cherry'</span><span class="p">,</span> <span class="s1">'durian'</span><span class="p">].</span><span class="nf">eachEven</span> <span class="k">do</span> <span class="o">|</span><span class="n">fruit</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s1">'Yum!  I just love '</span><span class="o">+</span><span class="n">fruit</span><span class="o">+</span><span class="s1">' pies, don\'t you?'</span>
<span class="k">end</span>

<span class="c1"># Remember, we are getting the even-numbered elements</span>
<span class="c1"># of the array, all of which happen to be odd numbers,</span>
<span class="c1"># just because I like to cause problems like that.</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">].</span><span class="nf">eachEven</span> <span class="k">do</span> <span class="o">|</span><span class="n">oddBall</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">oddBall</span><span class="p">.</span><span class="nf">to_s</span><span class="o">+</span><span class="s1">' is NOT an even number!'</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Yum!  I just love apple pies, don't you?
Yum!  I just love cherry pies, don't you?
1 is NOT an even number!
3 is NOT an even number!
5 is NOT an even number!
</code></pre></div></div>

<p>I remember one time I wanted to be able to time how long different sections of a program were taking. (This is also known as profiling the code.)</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">profile</span> <span class="n">descriptionOfBlock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="n">startTime</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>

  <span class="n">block</span><span class="p">.</span><span class="nf">call</span>

  <span class="n">duration</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span> <span class="o">-</span> <span class="n">startTime</span>

  <span class="nb">puts</span> <span class="n">descriptionOfBlock</span><span class="o">+</span><span class="s1">':  '</span><span class="o">+</span><span class="n">duration</span><span class="p">.</span><span class="nf">to_s</span><span class="o">+</span><span class="s1">' seconds'</span>
<span class="k">end</span>

<span class="n">profile</span> <span class="s1">'25000 doublings'</span> <span class="k">do</span>
  <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="mi">25000</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
    <span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="o">+</span> <span class="n">number</span>
  <span class="k">end</span>

  <span class="c1"># Show the number of digits in this HUGE number.</span>
  <span class="nb">puts</span> <span class="n">number</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">length</span><span class="p">.</span><span class="nf">to_s</span><span class="o">+</span><span class="s1">' digits'</span>
<span class="k">end</span>

<span class="n">profile</span> <span class="s1">'count to a million'</span> <span class="k">do</span>
  <span class="n">number</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="mi">1000000</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
    <span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7526 digits
25000 doublings:  0.026852 seconds
count to a million:  0.039258 seconds
</code></pre></div></div>

<h3 id="a-few-things-to-try--chapter-10">A Few Things to Try : Chapter 10</h3>

<ul>
  <li>Grandfather Clock. Write a method which takes a block and calls it once for each hour that has passed today. That way, if I were to pass in the block do puts ‘DONG!’ end, it would chime (sort of) like a grandfather clock. Test your method out with a few different blocks (including the one I just gave you).
  <strong>Hint</strong>: You can use Time.now.hour to get the current hour. However, this returns a number between 0 and 23, so you will have to alter those numbers in order to get ordinary clock-face numbers (1 to 12).</li>
  <li>
    <p>Program Logger. Write a method called log, which takes a string description of a block and, of course, a block. Similar to doSelfImportantly, it should puts a string telling that it has started the block, and another string at the end telling you that it has finished the block, and also telling you what the block returned. Test your method by sending it a code block. Inside the block, put another call to log, passing another block to it. (This is called nesting.) In other words, your output should look something like this:</p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Beginning "outer block"...
  Beginning "some little block"...
  ..."some little block" finished, returning:  5
  Beginning "yet another block"...
  ..."yet another block" finished, returning:  I like Thai food!
  ..."outer block" finished, returning:  false
</code></pre></div>    </div>
  </li>
  <li>
    <p>Better Logger. The output from that last logger was kind of hard to read, and it would just get worse the more you used it. It would be so much easier to read if it indented the lines in the inner blocks. To do this, you’ll need to keep track of how deeply nested you are every time the logger wants to write something. To do this, use a global variable, a variable you can see from anywhere in your code. To make a global variable, just precede your variable name with $, like these: $global, $nestingDepth, and $bigTopPeeWee. In the end, your logger should output code like this:</p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Beginning "outer block"...
  Beginning "some little block"...
      Beginning "teeny-tiny block"...
      ..."teeny-tiny block" finished, returning:  lots of love
  ..."some little block" finished, returning:  42
  Beginning "yet another block"...
  ..."yet another block" finished, returning:  I love Indian food!
  ..."outer block" finished, returning:  true
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://pine.fm/LearnToProgram/chap_01.html">https://pine.fm/LearnToProgram/chap_01.html</a></li>
</ul>]]></content><author><name>Purbayan Chowdhury</name><email>pur.cho.99@gmail.com</email></author><category term="ruby" /><category term="programming" /><summary type="html"><![CDATA[Welcome to the world of Ruby, a dynamic and versatile programming language that’s been delighting developers and powering innovative applications for over two decades. Known for its simplicity, readability, and ease of use, Ruby has become a favorite among beginners and experienced programmers alike. In this introduction to Ruby, we’ll take you on a journey through the basics of the language, covering its syntax, features, and ecosystem. You’ll learn how to write Ruby code, work with data structures, and create reusable functions. Whether you’re new to programming or looking to add Ruby to your skillset, this guide will provide a solid foundation for further exploration. By the end of this introduction, you’ll understand why Ruby is a popular choice for web development, scripting, and system administration, and be ready to start building your own Ruby projects. So let’s get started and uncover the joy of programming with Ruby! Numbers : Chapter 1 Ruby Hello World Program puts "Hello World" Save and run the file. ruby calc.rb Introduction to puts puts 1+2 puts simply writes onto the screen whatever comes after it. Integer and Float Numbers without decimal points are called integers, and numbers with decimal points are called floating-point numbers. Here are some integers: 5 -205 9999999999999999999999999 0 Here are some floats: 54.321 0.001 -205.3884 0.0 Simple Arithmetic Let’s do some simple arithmetic: puts 1.0 + 2.0 puts 2.0 * 3.0 puts 5.0 - 8.0 puts 9.0 / 2.0 Program result: 3.0 6.0 -3.0 4.5 Let’s try it with integers: puts 1+2 puts 2*3 puts 5-8 puts 9/2 Program result: 3 6 -3 4 Complex arithmetic expressions can be written using the following operators: puts 5 * (12-8) + -15 puts 98 + (59872 / (13*8)) * -52 5 -29802 Letters : Chapter 2 Some strings are: 'Hello.' 'Ruby rocks.' '5 is my favorite number... what is yours?' 'Snoopy says #%^?&amp;*@! when he stubs his toe.' ' ' '' Strings can have punctuation, digits, symbols, and spaces in them… more than just letters. Let’s try it with some strings: puts 'Hello, world!' puts '' puts 'Good-bye.' Hello, world! Good-bye. String Arithmetic Adding or concatenating strings is easy: puts 'I like' + 'apple pie.' I likeapple pie. puts 'I like ' + 'apple pie.' puts 'I like' + ' apple pie.' I like apple pie. I like apple pie. We can multiply them puts 'blink ' * 4 blink blink blink blink 12 vs ‘12’ 12 is a number, but ‘12’ is a string of two digits. puts 12 + 12 puts '12' + '12' puts '12 + 12' 24 1212 12 + 12 puts 2 * 5 puts '2' * 5 puts '2 * 5' 10 22222 2 * 5 Problems puts '12' + 12 puts '2' * '5' #&lt;TypeError: no implicit conversion of Integer into String&gt; puts 'You're swell!' The computer thought we were done with the string. (This is why it’s nice to have a text editor which does syntax coloring for you.) puts 'You\'re swell!' You're swell! puts 'You\'re swell!' puts 'backslash at the end of a string: \\' puts 'up\\down' puts 'up\down' The backslash is the escape character. In other words, if you have a backslash and another character, they are sometimes translated into a new character. You're swell! backslash at the end of a string: \ up\down up\down Variables and Assignment : Chapter 3 We wanted to print something out twice, we would have to type it in twice: puts '...you can say that again...' puts '...you can say that again...' ...you can say that again... ...you can say that again... Assigning a value to a variable is called assignment. myString = '...you can say that again...' puts myString puts myString ...you can say that again... ...you can say that again... name = 'Patricia Rosanna Jessica Mildred Oppenheimer' puts 'My name is ' + name + '.' puts 'Wow! ' + name + ' is a really long name!' My name is Patricia Rosanna Jessica Mildred Oppenheimer. Wow! Patricia Rosanna Jessica Mildred Oppenheimer is a really long name! We can assign an object to a variable, we can reassign a different object to that variable. composer = 'Mozart' puts composer + ' was "da bomb", in his day.' composer = 'Beethoven' puts 'But I prefer ' + composer + ', personally.' Mozart was "da bomb", in his day. But I prefer Beethoven, personally. Variables can point to any kind of object, not just strings: var = 'just another ' + 'string' puts var var = 5 * (1+2) puts var just another string 15 Variables can point to just about anything… except other variables. var1 = 8 var2 = var1 puts var1 puts var2 puts '' var1 = 'eight' puts var1 puts var2 8 8 eight 8 Mixing it all up : Chapter 4 var1 = 2 var2 = '5' puts var1 + var2 If you were trying to get 7 (2 + 5), or if you wanted to get 25 (‘2’ + ‘5’). Conversions To get the string version of an object, we simply write .to_s after it: var1 = 2 var2 = '5' puts var1.to_s + var2 25 Similarly, to_i gives the integer version of an object, and to_f gives the float version. var1 = 2 var2 = '5' puts var1.to_s + var2 puts var1 + var2.to_i 25 7 Other conversions: puts '15'.to_f puts '99.999'.to_f puts '99.999'.to_i puts '' puts '5 is my favorite number!'.to_i puts 'Who asked you about 5 or whatever?'.to_i puts 'Your momma did.'.to_f puts '' puts 'stringy'.to_s puts 3.to_i 15.0 99.999 99 5 0 0.0 stringy 3 The first one is pretty standard, giving 15.0. After that, we converted the string ‘99.999’ to a float and to an integer. Another Look at puts puts 20 puts 20.to_s puts '20' 20 20 20 Before puts tries to write out an object, it uses to_s to get the string version of that object. In fact, the s in puts stands for string; puts really means put string. The Methods gets and chomp Since our keyboard only makes strings, that works out beautifully. What actually happens is that gets just sits there, reading what we type until we press Enter. puts gets Is there an echo in here? Is there an echo in here? In this one, type in your name and it will greet you: puts 'Hello there, and what\'s your name?' name = gets puts 'Your name is ' + name + '? What a lovely name!' puts 'Pleased to meet you, ' + name + '. :)' Hello there, and what's your name? Chris Your name is Chris ? What a lovely name! Pleased to meet you, Chris . :) When I typed in the letters C, h, r, i, s, and then pressed Enter, gets got all of the letters in my name and the Enter! Let’s try that program again, but with chomp to help us this time: puts 'Hello there, and what\'s your name?' name = gets.chomp puts 'Your name is ' + name + '? What a lovely name!' puts 'Pleased to meet you, ' + name + '. :)' Hello there, and what's your name? Chris Your name is Chris? What a lovely name! Pleased to meet you, Chris. :) More About Methods : Chapter 5 As it turns out, 5 + 5 is really just a shortcut way of writing 5.+ 5. puts 'hello '.+ 'world' puts (10.* 9).+ 9 hello world 99 On older versions of Ruby, this code might also give a warning: warning: parenthesize argument(s) for future version. It would still run the code just fine, though. So what is self? It’s a special variable which points to whatever object you are in. iCantBelieveIMadeAVariableNameThisLongJustToPointToA3 = 3 puts iCantBelieveIMadeAVariableNameThisLongJustToPointToA3 self.puts iCantBelieveIMadeAVariableNameThisLongJustToPointToA3 3 3 Fancy String Methods So, our first string method is reverse, which gives a backwards version of a string: var1 = 'stop' var2 = 'stressed' var3 = 'Can you pronounce this sentence backwards?' puts var1.reverse puts var2.reverse puts var3.reverse puts var1 puts var2 puts var3 pots desserts ?sdrawkcab ecnetnes siht ecnuonorp uoy naC stop stressed Can you pronounce this sentence backwards? Another string method is length, which tells us the number of characters (including spaces) in the string: puts 'What is your full name?' name = gets.chomp puts 'Did you know there are ' + name.length + ' characters in your name, ' + name + '?' What is your full name? Christopher David Pine #&lt;TypeError: no implicit conversion of Integer into String&gt; swapcase switches the case of every letter in the string, and finally, capitalize is just like downcase, except that it switches the first character to uppercase (if it is a letter). letters = 'aAbBcCdDeE' puts letters.upcase puts letters.downcase puts letters.swapcase puts letters.capitalize puts ' a'.capitalize puts letters AABBCCDDEE aabbccddee AaBbCcDdEe Aabbccddee a aAbBcCdDeE So if I wanted to center the lines of a poem, I would do it like this: lineWidth = 50 puts( 'Old Mother Hubbard'.center(lineWidth)) puts( 'Sat in her cupboard'.center(lineWidth)) puts( 'Eating her curds an whey,'.center(lineWidth)) puts( 'When along came a spider'.center(lineWidth)) puts( 'Which sat down beside her'.center(lineWidth)) puts('And scared her poor shoe dog away.'.center(lineWidth)) Old Mother Hubbard Sat in her cupboard Eating her curds an whey, When along came a spider Which sat down beside her And scared her poor shoe dog away. The other two string formatting methods are ljust and rjust, which stand for left justify and right justify. They are similar to center, except that they pad the string with spaces on the right and left sides, respectively. lineWidth = 40 str = '--&gt; text &lt;--' puts str.ljust lineWidth puts str.center lineWidth puts str.rjust lineWidth puts str.ljust(lineWidth/2) + str.rjust(lineWidth/2) --&gt; text &lt;-- --&gt; text &lt;-- --&gt; text &lt;-- --&gt; text &lt;-- --&gt; text &lt;-- Problems - 5 Write an Angry Boss program. It should rudely ask what you want. Whatever you answer, the Angry Boss should yell it back to you, and then fire you. For example, if you type in I want a raise., it should yell back WHADDAYA MEAN "I WANT A RAISE."?!? YOU'RE FIRED!! So here’s something for you to do in order to play around more with center, ljust, and rjust: Write a program which will display a Table of Contents so that it looks like this: Table of Contents Chapter 1: Numbers page 1 Chapter 2: Letters page 72 Chapter 3: Variables page 118 Higher Math We’ll look at the rest of the arithmetic methods, a random number generator, and the Math object, with its trigonometric and transcendental methods. The other two arithmetic methods are ** (exponentiation) and % (modulus). puts 5**2 puts 5**0.5 puts 7/3 puts 7%3 puts 365%7 25 2.23606797749979 2 1 1 It just takes the absolute value of the number: puts((5-2).abs) puts((2-5).abs) 3 3 Random Numbers If we call rand just like that, we’ll get a float greater than or equal to 0.0 and less than 1.0. If we give rand an integer (5 for example), it will give we an integer greater than or equal to 0 and less than 5 (so five possible numbers, from 0 to 4). Let’s see rand in action. puts rand puts rand puts rand puts(rand(100)) puts(rand(100)) puts(rand(100)) puts(rand(1)) puts(rand(1)) puts(rand(1)) puts(rand(99999999999999999999999999999999999999999999999999999999999)) puts('The weatherman said there is a '+rand(101).to_s+'% chance of rain,') puts('but you can never trust a weatherman.') 0.17429261270690644 0.6038796470847551 0.5357456897902644 82 63 21 0 0 0 93717128025224525218060865578711367433735357080012377789690 The weatherman said there is a 9% chance of rain, but you can never trust a weatherman. In order to do this, you need to set the seed, which you can do with srand. Like this: srand 1776 puts(rand(100)) puts(rand(100)) puts(rand(100)) puts(rand(100)) puts(rand(100)) puts '' srand 1776 puts(rand(100)) puts(rand(100)) puts(rand(100)) puts(rand(100)) puts(rand(100)) 24 35 36 58 70 24 35 36 58 70 The Math Object Finally, let’s look at the Math object. We might as well jump right in: puts(Math::PI) puts(Math::E) puts(Math.cos(Math::PI/3)) puts(Math.tan(Math::PI/4)) puts(Math.log(Math::E**2)) puts((1 + Math.sqrt(5))/2) 3.141592653589793 2.718281828459045 0.5000000000000001 0.9999999999999999 2.0 1.618033988749895 Flow Control : Chapter 6 Comparison Methods So, to see if one object is greater than or less than another, we use the methods &gt; and &lt;, like this: puts 1 &gt; 2 puts 1 &lt; 2 false true Likewise, we can find out if an object is greater-than-or-equal-to another (or less-than-or-equal-to) with the methods &gt;= and &lt;= puts 5 &gt;= 5 puts 5 &lt;= 4 true false It’s important not to confuse = with ==. = is for telling a variable to point at an object (assignment), and == is for asking the question: “Are these two objects equal?” puts 1 == 1 puts 2 != 1 true true When strings get compared, they compare their lexicographical ordering, which basically means their dictionary ordering. cat comes before dog in the dictionary, so: puts 'cat' &lt; 'dog' true One last note before Branching: The comparison methods aren’t giving us the strings ‘true’ and ‘false’; they are giving us the special objects true and false. Branching Branching is a simple concept, but powerful. puts 'Hello, what\'s your name?' name = gets.chomp puts 'Hello, ' + name + '.' if name == 'Chris' puts 'What a lovely name!' end Hello, what's your name? Chris Hello, Chris. What a lovely name! We put in a different name Hello, what's your name? Chewbacca Hello, Chewbacca. If what comes after the if is true, we run the code between the if and the end. If what comes after the if is false, we don’t. Often, we would like a program to do one thing if an expression is true, and another if it is false. That’s what else is for: puts 'I am a fortune-teller. Tell me your name:' name = gets.chomp if name == 'Chris' puts 'I see great things in your future.' else puts 'Your future is... Oh my! Look at the time!' puts 'I really have to go, sorry!' end I am a fortune-teller. Tell me your name: Chris I see great things in your future. I am a fortune-teller. Tell me your name: Ringo Your future is... Oh my! Look at the time! I really have to go, sorry! puts 'Hello, and welcome to 7th grade English.' puts 'My name is Mrs. Gabbard. And your name is...?' name = gets.chomp if name == name.capitalize puts 'Please take a seat, ' + name + '.' else puts name + '? You mean ' + name.capitalize + ', right?' puts 'Don\'t you even know how to spell your name??' reply = gets.chomp if reply.downcase == 'yes' puts 'Hmmph! Well, sit down!' else puts 'GET OUT!!' end end Hello, and welcome to 7th grade English. My name is Mrs. Gabbard. And your name is...? chris chris? You mean Chris, right? Don't you even know how to spell your name?? yes Hmmph! Well, sit down! Hello, and welcome to 7th grade English. My name is Mrs. Gabbard. And your name is...? Chris Please take a seat, Chris. Sometimes it might get confusing trying to figure out where all of the ifs, elses, and ends go. puts 'Hello, and welcome to 7th grade English.' puts 'My name is Mrs. Gabbard. And your name is...?' name = gets.chomp if name == name.capitalize else end puts 'Hello, and welcome to 7th grade English.' puts 'My name is Mrs. Gabbard. And your name is...?' name = gets.chomp if name == name.capitalize # She's civil. else # She gets mad. end puts 'Hello, and welcome to 7th grade English.' puts 'My name is Mrs. Gabbard. And your name is...?' name = gets.chomp if name == name.capitalize puts 'Please take a seat, ' + name + '.' else puts name + '? You mean ' + name.capitalize + ', right?' puts 'Don\'t you even know how to spell your name??' reply = gets.chomp if reply.downcase == 'yes' else end end Looping command = '' while command != 'bye' puts command command = gets.chomp end puts 'Come again soon!' Hello? Hello? Hi! Hi! Very nice to meet you. Very nice to meet you. Oh... how sweet! Oh... how sweet! bye Come again soon! A Little Bit of Logic puts 'Hello, what\'s your name?' name = gets.chomp puts 'Hello, ' + name + '.' if name == 'Chris' puts 'What a lovely name!' else if name == 'Katy' puts 'What a lovely name!' end end Hello, what's your name? Katy Hello, Katy. What a lovely name! The DRY rule is Don’t Repeat Yourself puts 'Hello, what\'s your name?' name = gets.chomp puts 'Hello, ' + name + '.' if (name == 'Chris' or name == 'Katy') puts 'What a lovely name!' end Hello, what's your name? Katy Hello, Katy. What a lovely name! The other logical operators are and and not. iAmChris = true iAmPurple = false iLikeFood = true iEatRocks = false puts (iAmChris and iLikeFood) puts (iLikeFood and iEatRocks) puts (iAmPurple and iLikeFood) puts (iAmPurple and iEatRocks) puts puts (iAmChris or iLikeFood) puts (iLikeFood or iEatRocks) puts (iAmPurple or iLikeFood) puts (iAmPurple or iEatRocks) puts puts (not iAmPurple) puts (not iAmChris ) true false false false true true true false true false A Few Things to Try : Chapter 6 “99 bottles of beer on the wall…” Write a program which prints out the lyrics to that beloved classic, that field-trip favorite: “99 Bottles of Beer on the Wall.” Write a Deaf Grandma program. Whatever you say to grandma (whatever you type in), she should respond with HUH?! SPEAK UP, SONNY!, unless you shout it (type in all capitals). If you shout, she can hear you (or at least she thinks so) and yells back, NO, NOT SINCE 1938! To make your program really believable, have grandma shout a different year each time; maybe any year at random between 1930 and 1950. (This part is optional, and would be much easier if you read the section on Ruby’s random number generator at the end of the methods chapter.) You can’t stop talking to grandma until you shout BYE. Hint: Don’t forget about chomp! ‘BYE’with an Enter is not the same as ‘BYE’ without one! Hint 2: Try to think about what parts of your program should happen over and over again. All of those should be in your while loop. Extend your Deaf Grandma program: What if grandma doesn’t want you to leave? When you shout BYE, she could pretend not to hear you. Change your previous program so that you have to shout BYE three times in a row. Make sure to test your program: if you shout BYE three times, but not in a row, you should still be talking to grandma. Leap Years. Write a program which will ask for a starting year and an ending year, and then puts all of the leap years between them (and including them, if they are also leap years). Leap years are years divisible by four (like 1984 and 2004). However, years divisible by 100 are not leap years (such as 1800 and 1900) unless they are divisible by 400 (like 1600 and 2000, which were in fact leap years). (Yes, it’s all pretty confusing, but not as confusing as having July in the middle of the winter, which is what would eventually happen.) Arrays and Iterators : Chapter 7 An array is just a list in your computer. Every slot in the list acts like a variable: you can see what object a particular slot points to, and you can make it point to a different object. Let’s take a look at some arrays: [] [5] ['Hello', 'Goodbye'] flavor = 'vanilla' # This is not an array, of course... [89.9, flavor, [true, false]] # ...but this is. We would reference the objects in an array: names = ['Ada', 'Belle', 'Chris'] puts names puts names[0] puts names[1] puts names[2] puts names[3] # This is out of range. Ada Belle Chris Ada Belle Chris The Method each If we want to say something nice about each language in the array below, we’d do this: languages = ['English', 'German', 'Ruby'] languages.each do |lang| puts 'I love ' + lang + '!' puts 'Don\'t you?' end puts 'And let\'s hear it for C++!' puts '...' I love English! Don't you? I love German! Don't you? I love Ruby! Don't you? And let's hear it for C++! They are always followed by do…end. while and if never had a do near them; we only use do with iterators. 3.times do puts 'Hip-Hip-Hooray!' end Hip-Hip-Hooray! Hip-Hip-Hooray! Hip-Hip-Hooray! More Array Methods Let’s look at to_s and join. join works much like to_s does, except that it adds a string in between the array’s objects. Let’s take a look: foods = ['artichoke', 'brioche', 'caramel'] puts foods puts puts foods.to_s puts puts foods.join(', ') puts puts foods.join(' :) ') + ' 8)' 200.times do puts [] end artichoke brioche caramel ["artichoke", "brioche", "caramel"] artichoke, brioche, caramel artichoke :) brioche :) caramel 8) Let’s take a look at push, pop, and last. The methods push and pop are sort of opposites, like + and - are. push adds an object to the end of your array, and pop removes the last object from the array (and tell you what it was). last is similar to pop in that it tells you what’s at the end of the array, except that it leaves the array alone. Again, push and pop actually change the array: favorites = [] favorites.push 'raindrops on roses' favorites.push 'whiskey on kittens' puts favorites[0] puts favorites.last puts favorites.length puts favorites.pop puts favorites puts favorites.length raindrops on roses whiskey on kittens 2 whiskey on kittens raindrops on roses 1 A Few Things to Try : Chapter 7 Write the program we talked about at the very beginning of this chapter. Hint: There’s a lovely array method which will give you a sorted version of an array: sort. Use it! Try writing the above program without using the sort method. A large part of programming is solving problems, so get all the practice you can! Rewrite your Table of Contents program (from the chapter on methods). Start the program with an array holding all of the information for your Table of Contents (chapter names, page numbers, etc.). Then print out the information from the array in a beautifully formatted Table of Contents. Writing Your Own Methods : Chapter 8 puts 'Hello, and thank you for taking the time to' puts 'help me with this experiment. My experiment' puts 'has to do with the way people feel about' puts 'Mexican food. Just think about Mexican food' puts 'and try to answer every question honestly,' puts 'with either a "yes" or a "no". My experiment' puts 'has nothing to do with bed-wetting.' puts # We ask these questions, but we ignore their answers. goodAnswer = false while (not goodAnswer) puts 'Do you like eating tacos?' answer = gets.chomp.downcase if (answer == 'yes' or answer == 'no') goodAnswer = true else puts 'Please answer "yes" or "no".' end end goodAnswer = false while (not goodAnswer) puts 'Do you like eating burritos?' answer = gets.chomp.downcase if (answer == 'yes' or answer == 'no') goodAnswer = true else puts 'Please answer "yes" or "no".' end end # We pay attention to *this* answer, though. goodAnswer = false while (not goodAnswer) puts 'Do you wet the bed?' answer = gets.chomp.downcase if (answer == 'yes' or answer == 'no') goodAnswer = true if answer == 'yes' wetsBed = true else wetsBed = false end else puts 'Please answer "yes" or "no".' end end goodAnswer = false while (not goodAnswer) puts 'Do you like eating chimichangas?' answer = gets.chomp.downcase if (answer == 'yes' or answer == 'no') goodAnswer = true else puts 'Please answer "yes" or "no".' end end puts 'Just a few more questions...' goodAnswer = false while (not goodAnswer) puts 'Do you like eating sopapillas?' answer = gets.chomp.downcase if (answer == 'yes' or answer == 'no') goodAnswer = true else puts 'Please answer "yes" or "no".' end end # Ask lots of other questions about Mexican food. puts puts 'DEBRIEFING:' puts 'Thank you for taking the time to help with' puts 'this experiment. In fact, this experiment' puts 'has nothing to do with Mexican food. It is' puts 'an experiment about bed-wetting. The Mexican' puts 'food was just there to catch you off guard' puts 'in the hopes that you would answer more' puts 'honestly. Thanks again.' puts puts wetsBed Hello, and thank you for taking the time to help me with this experiment. My experiment has to do with the way people feel about Mexican food. Just think about Mexican food and try to answer every question honestly, with either a "yes" or a "no". My experiment has nothing to do with bed-wetting. Do you like eating tacos? yes Do you like eating burritos? yes Do you wet the bed? no way! Please answer "yes" or "no". Do you wet the bed? NO Do you like eating chimichangas? yes Just a few more questions... Do you like eating sopapillas? yes DEBRIEFING: Thank you for taking the time to help with this experiment. In fact, this experiment has nothing to do with Mexican food. It is an experiment about bed-wetting. The Mexican food was just there to catch you off guard in the hopes that you would answer more honestly. Thanks again. false In situations like these, it’s best to write a method. Here’s how: def sayMoo puts 'mooooooo...' end sayMoo sayMoo puts 'coin-coin' sayMoo sayMoo mooooooo... mooooooo... coin-coin mooooooo... mooooooo... Method Parameters To add a parameter to sayMoo (let’s say, the number of moos), we would do this: def sayMoo numberOfMoos puts 'mooooooo...'*numberOfMoos end sayMoo 3 puts 'oink-oink' sayMoo # This should give an error because the parameter is missing. mooooooo...mooooooo...mooooooo... oink-oink #&lt;ArgumentError: wrong number of arguments (given 0, expected 1)&gt; numberOfMoos is a variable which points to the parameter passed in. numberOfMoos is a variable which points to the parameter passed in. So if I type in sayMoo 3, then the parameter is 3, and the variable numberOfMoos points to 3. Local Variables In the following program, there are two variables: def doubleThis num numTimes2 = num*2 puts num.to_s+' doubled is '+numTimes2.to_s end doubleThis 44 44 doubled is 88 The variables are num and numTimes2. They both sit inside the method doubleThis. def doubleThis num numTimes2 = num*2 puts num.to_s+' doubled is '+numTimes2.to_s end doubleThis 44 puts numTimes2.to_s 44 doubled is 88 #&lt;NameError: undefined local variable or method `numTimes2' for #&lt;StringIO:0x00007fc89a08a880&gt;&gt; While it does mean that you have no access to variables inside methods, it also means that they have no access to your variables, and thus can’t screw them up: def littlePest var var = nil puts 'HAHA! I ruined your variable!' end var = 'You can\'t even touch my variable!' littlePest var puts var HAHA! I ruined your variable! You can't even touch my variable! There are actually two variables in that little program named var: one inside littlePest, and one outside of it. Return Values gets returns a string (the string you typed in), and the + method in 5+3, (which is really 5.+(3)) returns 8. The arithmetic methods for numbers return numbers, and the arithmetic methods for strings return strings. We never cared before, but let’s look at it now: returnVal = puts 'This puts returned:' puts returnVal This puts returned: If we wanted all of our methods to return the string ‘yellow submarine’, we would just need to put that at the end of them: def sayMoo numberOfMoos puts 'mooooooo...'\*numberOfMoos 'yellow submarine' end x = sayMoo 2 puts x mooooooo...mooooooo... yellow submarine It will need to take the question as a parameter, and return true if they answered yes and false if they answered no. def ask question goodAnswer = false while (not goodAnswer) puts question reply = gets.chomp.downcase if (reply == 'yes' or reply == 'no') goodAnswer = true if reply == 'yes' answer = true else answer = false end else puts 'Please answer "yes" or "no".' end end answer # This is what we return (true or false). end puts 'Hello, and thank you for...' puts ask 'Do you like eating tacos?' # We ignore this return value. ask 'Do you like eating burritos?' wetsBed = ask 'Do you wet the bed?' # We save this return value. ask 'Do you like eating chimichangas?' ask 'Do you like eating sopapillas?' ask 'Do you like eating tamales?' puts 'Just a few more questions...' ask 'Do you like drinking horchata?' ask 'Do you like eating flautas?' puts puts 'DEBRIEFING:' puts 'Thank you for...' puts puts wetsBed Hello, and thank you for... Do you like eating tacos? yes Do you like eating burritos? yes Do you wet the bed? no way! Please answer "yes" or "no". Do you wet the bed? NO Do you like eating chimichangas? yes Do you like eating sopapillas? yes Do you like eating tamales? yes Just a few more questions... Do you like drinking horchata? yes Do you like eating flautas? yes DEBRIEFING: Thank you for... false One More Big Example It will take a number, like 22, and return the english version of it (in this case, the string ‘twenty-two’). For now, let’s have it only work on integers from 0 to 100. def englishNumber number # We only want numbers from 0-100. if number &lt; 0 return 'Please enter a number zero or greater.' end if number &gt; 100 return 'Please enter a number 100 or lesser.' end numString = '' # This is the string we will return. # "left" is how much of the number we still have left to write out. # "write" is the part we are writing out right now. # write and left... get it? :) left = number write = left/100 # How many hundreds left to write out? left = left - write*100 # Subtract off those hundreds. if write &gt; 0 return 'one hundred' end write = left/10 # How many tens left to write out? left = left - write*10 # Subtract off those tens. if write &gt; 0 if write == 1 # Uh-oh... # Since we can't write "tenty-two" instead of "twelve", # we have to make a special exception for these. if left == 0 numString = numString + 'ten' elsif left == 1 numString = numString + 'eleven' elsif left == 2 numString = numString + 'twelve' elsif left == 3 numString = numString + 'thirteen' elsif left == 4 numString = numString + 'fourteen' elsif left == 5 numString = numString + 'fifteen' elsif left == 6 numString = numString + 'sixteen' elsif left == 7 numString = numString + 'seventeen' elsif left == 8 numString = numString + 'eighteen' elsif left == 9 numString = numString + 'nineteen' end # Since we took care of the digit in the ones place already, # we have nothing left to write. left = 0 elsif write == 2 numString = numString + 'twenty' elsif write == 3 numString = numString + 'thirty' elsif write == 4 numString = numString + 'forty' elsif write == 5 numString = numString + 'fifty' elsif write == 6 numString = numString + 'sixty' elsif write == 7 numString = numString + 'seventy' elsif write == 8 numString = numString + 'eighty' elsif write == 9 numString = numString + 'ninety' end if left &gt; 0 numString = numString + '-' end end write = left # How many ones left to write out? left = 0 # Subtract off those ones. if write &gt; 0 if write == 1 numString = numString + 'one' elsif write == 2 numString = numString + 'two' elsif write == 3 numString = numString + 'three' elsif write == 4 numString = numString + 'four' elsif write == 5 numString = numString + 'five' elsif write == 6 numString = numString + 'six' elsif write == 7 numString = numString + 'seven' elsif write == 8 numString = numString + 'eight' elsif write == 9 numString = numString + 'nine' end end if numString == '' # The only way "numString" could be empty is if # "number" is 0. return 'zero' end # If we got this far, then we had a number somewhere # in between 0 and 100, so we need to return "numString". numString end puts englishNumber( 0) puts englishNumber( 9) puts englishNumber( 10) puts englishNumber( 11) puts englishNumber( 17) puts englishNumber( 32) puts englishNumber( 88) puts englishNumber( 99) puts englishNumber(100) zero nine ten eleven seventeen thirty-two eighty-eight ninety-nine one hundred Let’s use some arrays and try to clean it up a bit: def englishNumber number if number &lt; 0 # No negative numbers. return 'Please enter a number that isn\'t negative.' end if number == 0 return 'zero' end # No more special cases! No more returns! numString = '' # This is the string we will return. onesPlace = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'] tensPlace = ['ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'] teenagers = ['eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'] # "left" is how much of the number we still have left to write out. # "write" is the part we are writing out right now. # write and left... get it? :) left = number write = left/100 # How many hundreds left to write out? left = left - write*100 # Subtract off those hundreds. if write &gt; 0 # Now here's a really sly trick: hundreds = englishNumber write numString = numString + hundreds + ' hundred' # That's called "recursion". So what did I just do? # I told this method to call itself, but with "write" instead of # "number". Remember that "write" is (at the moment) the number of # hundreds we have to write out. After we add "hundreds" to # "numString", we add the string ' hundred' after it. # So, for example, if we originally called englishNumber with # 1999 (so "number" = 1999), then at this point "write" would # be 19, and "left" would be 99. The laziest thing to do at this # point is to have englishNumber write out the 'nineteen' for us, # then we write out ' hundred', and then the rest of # englishNumber writes out 'ninety-nine'. if left &gt; 0 # So we don't write 'two hundredfifty-one'... numString = numString + ' ' end end write = left/10 # How many tens left to write out? left = left - write*10 # Subtract off those tens. if write &gt; 0 if ((write == 1) and (left &gt; 0)) # Since we can't write "tenty-two" instead of "twelve", # we have to make a special exception for these. numString = numString + teenagers[left-1] # The "-1" is because teenagers[3] is 'fourteen', not 'thirteen'. # Since we took care of the digit in the ones place already, # we have nothing left to write. left = 0 else numString = numString + tensPlace[write-1] # The "-1" is because tensPlace[3] is 'forty', not 'thirty'. end if left &gt; 0 # So we don't write 'sixtyfour'... numString = numString + '-' end end write = left # How many ones left to write out? left = 0 # Subtract off those ones. if write &gt; 0 numString = numString + onesPlace[write-1] # The "-1" is because onesPlace[3] is 'four', not 'three'. end # Now we just return "numString"... numString end puts englishNumber( 0) puts englishNumber( 9) puts englishNumber( 10) puts englishNumber( 11) puts englishNumber( 17) puts englishNumber( 32) puts englishNumber( 88) puts englishNumber( 99) puts englishNumber(100) puts englishNumber(101) puts englishNumber(234) puts englishNumber(3211) puts englishNumber(999999) puts englishNumber(1000000000000) zero nine ten eleven seventeen thirty-two eighty-eight ninety-nine one hundred one hundred one two hundred thirty-four thirty-two hundred eleven ninety-nine hundred ninety-nine hundred ninety-nine one hundred hundred hundred hundred hundred hundred I think ‘one trillion’ would be a nicer return value for that last number, or even ‘one million million’ (though all three are correct). A Few Things to Try : Chapter 8 Expand upon englishNumber. First, put in thousands. So it should return ‘one thousand’ instead of ‘ten hundred’ and ‘ten thousand’ instead of ‘one hundred hundred’. Expand upon englishNumber some more. Now put in millions, so you get ‘one million’ instead of ‘one thousand thousand’. Then try adding billions and trillions. How high can you go? How about weddingNumber? It should work almost the same as englishNumber, except that it should insert the word “and” all over the place, returning things like ‘nineteen hundred and seventy and two’, or however wedding invitations are supposed to look. I’d give you more examples, but I don’t fully understand it myself. You might need to contact a wedding coordinator to help you. “Ninety-nine bottles of beer…” Using englishNumber and your old program, write out the lyrics to this song the right way this time. Punish your computer: have it start at 9999. (Don’t pick a number too large, though, because writing all of that to the screen takes your computer quite a while. A hundred thousand bottles of beer takes some time; and if you pick a million, you’ll be punishing yourself as well!) Classes : Chapter 9 We’ve seen several different kinds, or classes, of objects: strings, integers, floats, arrays, and a few special objects (true, false, and nil). In Ruby, these classes are always capitalized: String, Integer, Float, Array… etc. In general, if we want to create a new object of a certain class, we use new: a = Array.new + [12345] # Array addition. b = String.new + 'hello' # String addition. c = Time.new puts 'a = '+a.to_s puts 'b = '+b.to_s puts 'c = '+c.to_s a = [12345] b = hello c = 2021-02-26 13:39:11 -0800 Because we can create arrays and strings using […] and ‘…’ respectively, we rarely create them using new. The Time Class Time objects represent moments in time. You can add (or subtract) numbers to (or from) times to get new times: adding 1.5 to a time makes a new time one-and-a-half seconds later: time = Time.new # The moment I generated this web page. time2 = time + 60 # One minute later. puts time puts time2 2021-02-26 13:39:11 -0800 2021-02-26 13:40:11 -0800 You can also make a time for a specific moment using Time.mktime: puts Time.mktime(2000, 1, 1) # Y2K. puts Time.mktime(1976, 8, 3, 10, 11) # When I was born. 2000-01-01 00:00:00 -0800 1976-08-03 10:11:00 -0700 Notice: that’s when I was born in Pacific Daylight Savings Time (PDT). When Y2K struck, though, it was Pacific Standard Time (PST), at least to us West Coasters. A Few Things to Try : Chapter 9 One billion seconds… Find out the exact second you were born (if you can). Figure out when you will turn (or perhaps when you did turn?) one billion seconds old. Then go mark your calendar. Happy Birthday! Ask what year a person was born in, then the month, then the day. Figure out how old they are and give them a big SPANK! for each birthday they have had. The Hash Class Hashes are a lot like arrays: they have a bunch of slots which can point to various objects. In an array, the slots are lined up in a row, and each one is numbered (starting from zero). In a hash, the slots aren’t in a row (they are just sort of jumbled together), and you can use any object to refer to a slot, not just a number. colorArray = [] # same as Array.new colorHash = {} # same as Hash.new colorArray[0] = 'red' colorArray[1] = 'green' colorArray[2] = 'blue' colorHash['strings'] = 'red' colorHash['numbers'] = 'green' colorHash['keywords'] = 'blue' colorArray.each do |color| puts color end colorHash.each do |codeType, color| puts codeType + ': ' + color end red green blue strings: red numbers: green keywords: blue Though people usually use strings to name the slots in a hash, you could use any kind of object, even arrays and other hashes : weirdHash = Hash.new weirdHash[12] = 'monkeys' weirdHash[[]] = 'emptiness' weirdHash[Time.new] = 'no time like the present' Hashes and arrays are good for different things. Extending Classes We could write something like 22.to_eng instead of englishNumber 22 class Integer def to_eng if self == 5 english = 'five' else english = 'fifty-eight' end english end end # I'd better test on a couple of numbers... puts 5.to_eng puts 58.to_eng five fifty-eight We defined an integer method by jumping into the Integer class, defining the method there, and jumping back out. Creating Classes We could make the Die class: class Die def roll 1 + rand(6) end end # Let's make a couple of dice... dice = [Die.new, Die.new] # ...and roll them. dice.each do |die| puts die.roll end 6 2 If we skipped the section on random numbers, rand(6) just gives a random number between 0 and 5. Instance Variables We could also call it a string object. Sometimes programmers might call it an instance of the class String, but this is just a fancy (and rather long-winded) way of saying string. An instance of a class is just an object of that class. A method’s local variables last until the method is finished. An object’s instance variables, on the other hand, will last as long as the object does. class Die def roll @numberShowing = 1 + rand(6) end def showing @numberShowing end end die = Die.new die.roll puts die.showing puts die.showing die.roll puts die.showing puts die.showing 4 4 6 6 So roll rolls the die and showing tells us which number is showing. class Die def roll @numberShowing = 1 + rand(6) end def showing @numberShowing end end # Since I'm not going to use this die again, # I don't need to save it in a variable. puts Die.new.showing It would be nice if we could set up our new die object right when it’s created. That’s what initialize is for: class Die def initialize # I'll just roll the die, though we # could do something else if we wanted # to, like setting the die with 6 showing. roll end def roll @numberShowing = 1 + rand(6) end def showing @numberShowing end end puts Die.new.showing 1 When an object is created, its initialize method (if it has one defined) is always called. class Dragon def initialize name @name = name @asleep = false @stuffInBelly = 10 # He's full. @stuffInIntestine = 0 # He doesn't need to go. puts @name + ' is born.' end def feed puts 'You feed ' + @name + '.' @stuffInBelly = 10 passageOfTime end def walk puts 'You walk ' + @name + '.' @stuffInIntestine = 0 passageOfTime end def putToBed puts 'You put ' + @name + ' to bed.' @asleep = true 3.times do if @asleep passageOfTime end if @asleep puts @name + ' snores, filling the room with smoke.' end end if @asleep @asleep = false puts @name + ' wakes up slowly.' end end def toss puts 'You toss ' + @name + ' up into the air.' puts 'He giggles, which singes your eyebrows.' passageOfTime end def rock puts 'You rock ' + @name + ' gently.' @asleep = true puts 'He briefly dozes off...' passageOfTime if @asleep @asleep = false puts '...but wakes when you stop.' end end private # "private" means that the methods defined here are # methods internal to the object. (You can feed # your dragon, but you can't ask him if he's hungry.) def hungry? # Method names can end with "?". # Usually, we only do this if the method # returns true or false, like this: @stuffInBelly &lt;= 2 end def poopy? @stuffInIntestine &gt;= 8 end def passageOfTime if @stuffInBelly &gt; 0 # Move food from belly to intestine. @stuffInBelly = @stuffInBelly - 1 @stuffInIntestine = @stuffInIntestine + 1 else # Our dragon is starving! if @asleep @asleep = false puts 'He wakes up suddenly!' end puts @name + ' is starving! In desperation, he ate YOU!' exit # This quits the program. end if @stuffInIntestine &gt;= 10 @stuffInIntestine = 0 puts 'Whoops! ' + @name + ' had an accident...' end if hungry? if @asleep @asleep = false puts 'He wakes up suddenly!' end puts @name + '\'s stomach grumbles...' end if poopy? if @asleep @asleep = false puts 'He wakes up suddenly!' end puts @name + ' does the potty dance...' end end end pet = Dragon.new 'Norbert' pet.feed pet.toss pet.walk pet.putToBed pet.rock pet.putToBed pet.putToBed pet.putToBed pet.putToBed Norbert is born. You feed Norbert. You toss Norbert up into the air. He giggles, which singes your eyebrows. You walk Norbert. You put Norbert to bed. Norbert snores, filling the room with smoke. Norbert snores, filling the room with smoke. Norbert snores, filling the room with smoke. Norbert wakes up slowly. You rock Norbert gently. He briefly dozes off... ...but wakes when you stop. You put Norbert to bed. He wakes up suddenly! Norbert's stomach grumbles... You put Norbert to bed. He wakes up suddenly! Norbert's stomach grumbles... You put Norbert to bed. He wakes up suddenly! Norbert's stomach grumbles... Norbert does the potty dance... You put Norbert to bed. He wakes up suddenly! Norbert is starving! In desperation, he ate YOU! A Few Things to Try : Chapter 9.1 Make an OrangeTree class. It should have a height method which returns its height, and a oneYearPasses method, which, when called, ages the tree one year. Each year the tree grows taller (however much you think an orange tree should grow in a year), and after some number of years (again, your call) the tree should die. For the first few years, it should not produce fruit, but after a while it should, and I guess that older trees produce more each year than younger trees… whatever you think makes most sense. And, of course, you should be able to countTheOranges (which returns the number of oranges on the tree), and pickAnOrange (which reduces the @orangeCount by one and returns a string telling you how delicious the orange was, or else it just tells you that there are no more oranges to pick this year). Make sure that any oranges you don’t pick one year fall off before the next year. Write a program so that you can interact with your baby dragon. You should be able to enter commands like feed and walk, and have those methods be called on your dragon. Of course, since what you are inputting are just strings, you will have to have some sort of method dispatch, where your program checks which string was entered, and then calls the appropriate method. Blocks and Procs : Chapter 10 It’s the ability to take a block of code (code in between do and end), wrap it up in an object (called a proc), store it in a variable or pass it to a method, and run the code in the block whenever you feel like (more than once, if you want). So it’s kind of like a method itself, except that it isn’t bound to an object (it is an object), and you can store it or pass it around like you can with any object. toast = Proc.new do puts 'Cheers!' end toast.call toast.call toast.call Cheers! Cheers! Cheers! Actually, it’s even more like a method than I have shown you, because blocks can take parameters: doYouLike = Proc.new do |aGoodThing| puts 'I *really* like '+aGoodThing+'!' end doYouLike.call 'chocolate' doYouLike.call 'ruby' I *really* like chocolate! I *really* like ruby! Methods Which Take Procs When we pass a proc into a method, we can control how, if, or how many times we call the proc. def doSelfImportantly someProc puts 'Everybody just HOLD ON! I have something to do...' someProc.call puts 'Ok everyone, I\'m done. Go on with what you were doing.' end sayHello = Proc.new do puts 'hello' end sayGoodbye = Proc.new do puts 'goodbye' end doSelfImportantly sayHello doSelfImportantly sayGoodbye Everybody just HOLD ON! I have something to do... hello Ok everyone, I'm done. Go on with what you were doing. Everybody just HOLD ON! I have something to do... goodbye Ok everyone, I'm done. Go on with what you were doing. Here’s a method which will call the proc passed in about half of the time, and another which will call it twice: def maybeDo someProc if rand(2) == 0 someProc.call end end def twiceDo someProc someProc.call someProc.call end wink = Proc.new do puts '&lt;wink&gt;' end glance = Proc.new do puts '&lt;glance&gt;' end maybeDo wink maybeDo glance twiceDo wink twiceDo glance &lt;wink&gt; &lt;wink&gt; &lt;glance&gt; &lt;glance&gt; The method will return the last non-false value returned by the proc. def doUntilFalse firstInput, someProc input = firstInput output = firstInput while output input = output output = someProc.call input end input end buildArrayOfSquares = Proc.new do |array| lastNumber = array.last if lastNumber &lt;= 0 false else array.pop # Take off the last number... array.push lastNumber*lastNumber # ...and replace it with its square... array.push lastNumber-1 # ...followed by the next smaller number. end end alwaysFalse = Proc.new do |justIgnoreMe| false end puts doUntilFalse([5], buildArrayOfSquares).inspect puts doUntilFalse('I\'m writing this at 3:00 am; someone knock me out!', alwaysFalse) [25, 16, 9, 4, 1, 0] I'm writing this at 3:00 am; someone knock me out! Methods Which Return Procs We can do with procs is to create them in methods and return them. This allows all sorts of crazy programming power (things with impressive names, like lazy evaluation, infinite data structures, and currying). In this example, compose takes two procs and returns a new proc which, when called, calls the first proc and passes its result into the second proc. def compose proc1, proc2 Proc.new do |x| proc2.call(proc1.call(x)) end end squareIt = Proc.new do |x| x * x end doubleIt = Proc.new do |x| x + x end doubleThenSquare = compose doubleIt, squareIt squareThenDouble = compose squareIt, doubleIt puts doubleThenSquare.call(5) puts squareThenDouble.call(5) 100 50 Passing Blocks (Not Procs) into Methods A lot of the problem is that there are three steps you have to go through (defining the method, making the proc, and calling the method with the proc), when it sort of feels like there should only be two (defining the method, and passing the block right into the method, without using a proc at all), since most of the time you don’t want to use the proc/block after you pass it into the method. class Array def eachEven(&amp;wasABlock_nowAProc) # We start with "true" because arrays start with 0, which is even. isEven = true self.each do |object| if isEven wasABlock_nowAProc.call object end isEven = (not isEven) # Toggle from even to odd, or odd to even. end end end ['apple', 'bad apple', 'cherry', 'durian'].eachEven do |fruit| puts 'Yum! I just love '+fruit+' pies, don\'t you?' end # Remember, we are getting the even-numbered elements # of the array, all of which happen to be odd numbers, # just because I like to cause problems like that. [1, 2, 3, 4, 5].eachEven do |oddBall| puts oddBall.to_s+' is NOT an even number!' end Yum! I just love apple pies, don't you? Yum! I just love cherry pies, don't you? 1 is NOT an even number! 3 is NOT an even number! 5 is NOT an even number! I remember one time I wanted to be able to time how long different sections of a program were taking. (This is also known as profiling the code.) def profile descriptionOfBlock, &amp;block startTime = Time.now block.call duration = Time.now - startTime puts descriptionOfBlock+': '+duration.to_s+' seconds' end profile '25000 doublings' do number = 1 25000.times do number = number + number end # Show the number of digits in this HUGE number. puts number.to_s.length.to_s+' digits' end profile 'count to a million' do number = 0 1000000.times do number = number + 1 end end 7526 digits 25000 doublings: 0.026852 seconds count to a million: 0.039258 seconds A Few Things to Try : Chapter 10 Grandfather Clock. Write a method which takes a block and calls it once for each hour that has passed today. That way, if I were to pass in the block do puts ‘DONG!’ end, it would chime (sort of) like a grandfather clock. Test your method out with a few different blocks (including the one I just gave you). Hint: You can use Time.now.hour to get the current hour. However, this returns a number between 0 and 23, so you will have to alter those numbers in order to get ordinary clock-face numbers (1 to 12). Program Logger. Write a method called log, which takes a string description of a block and, of course, a block. Similar to doSelfImportantly, it should puts a string telling that it has started the block, and another string at the end telling you that it has finished the block, and also telling you what the block returned. Test your method by sending it a code block. Inside the block, put another call to log, passing another block to it. (This is called nesting.) In other words, your output should look something like this: Beginning "outer block"... Beginning "some little block"... ..."some little block" finished, returning: 5 Beginning "yet another block"... ..."yet another block" finished, returning: I like Thai food! ..."outer block" finished, returning: false Better Logger. The output from that last logger was kind of hard to read, and it would just get worse the more you used it. It would be so much easier to read if it indented the lines in the inner blocks. To do this, you’ll need to keep track of how deeply nested you are every time the logger wants to write something. To do this, use a global variable, a variable you can see from anywhere in your code. To make a global variable, just precede your variable name with $, like these: $global, $nestingDepth, and $bigTopPeeWee. In the end, your logger should output code like this: Beginning "outer block"... Beginning "some little block"... Beginning "teeny-tiny block"... ..."teeny-tiny block" finished, returning: lots of love ..."some little block" finished, returning: 42 Beginning "yet another block"... ..."yet another block" finished, returning: I love Indian food! ..."outer block" finished, returning: true References https://pine.fm/LearnToProgram/chap_01.html]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://shivishbrahma.github.io/publog/public/images/0001_cover_en.webp" /><media:content medium="image" url="http://shivishbrahma.github.io/publog/public/images/0001_cover_en.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>